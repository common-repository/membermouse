/**
 * 
 * 
MemberMouse(TM) (http://www.membermouse.com)
(c) 2010-2011 Pop Fizz Studios, LLC. All rights reserved.
 */
class MM_APIService
{
	public static function deleteOrder($data){
		$productIds = explode(",", $data->product_ids);
		$campaign_id = $data->campaign_id;
		$order_id = $data->order_id;
		
		$user = new MM_User();
		$user->setMainOrderId($order_id);
		$user->getDataByOrderId();
		
		$applied = false;
		if(count($productIds)>0){
			foreach($productIds as $productId){
				$product = new MM_Product($productId);
				if($product->isValid())
				{
					$memberTypeObj = $product->getAssociatedMemberType();
					$accessTypeObj = $product->getAssociatedAccessTag();
					
					if(isset($memberTypeObj->id) && $memberTypeObj->id>0){
						$memberType = new MM_MemberType($memberTypeObj->id);
						if($memberType->isValid()){
							$user->doUpdateLL = false;
							$eventHandle = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_EVENT_HANDLING_CANCEL);
							if($eventHandle==MM_EventHandlingStatus::$CANCEL_HARD){
								$user->setStatus(MM_MemberStatus::$CANCELED);
							}
							else if($eventHandle==MM_EventHandlingStatus::$CANCEL_PAUSE){
								$user->setStatus(MM_MemberStatus::$PAUSED);
							}
							$response = $user->commitData();
							if($response->type ==MM_Response::$ERROR){
								return $response;
							}
							$applied = true;
						}
					}
					else if(isset($accessTypeObj->id) && $accessTypeObj->id>0){
						$accessTag = new MM_AccessTag($accessTypeObj->id);
						if($accessTag->isValid()){
							$user->removeAccessTag($accessTag->getId());
							$applied = true;
						}
					}
				}
			}
		}
		if(!$applied){
			return new MM_Response("No records were updated. Could not find valid product association.", MM_Response::$ERROR);
		}
		return new MM_Response();
	}
	
	/*
	 * required parameters:
	 * user_type - (membermouse | limelight)
	 * member_id - ID pertaining to the user_type, must be INTEGER. 
	 */
	public static function getMember($data){
		
		$user = null;
		switch($data->user_type){
			case "limelight":
				$user = new MM_User();
				$user->setCustomerId($data->member_id);
				$user->getDataByCustomerId();
				break;
			default:
				$user = new MM_User($data->member_id);
				break;
		}
		
		if(!($user instanceof MM_User) || !$user->isValid()){
			return new MM_Response("Invalid user request", MM_Response::$ERROR);
		}
		
		$userData = array(
			'member_id'=>$user->getId(),
			'username'=>$user->getUsername(),
			'email' => $user->getEmail(),
			'password'=>$user->getPassword(),
			'phone' => $user->getPhone(),
			'billing_address'=>$user->getBillingAddress(),
			'billing_city'=>$user->getBillingCity(),
			'billing_state'=>$user->getBillingState(),
			'billing_zip'=>$user->getBillingZipCode(),
			'billing_country'=>$user->getBillingCountryName(),
			'shipping_address'=>$user->getShippingAddress(),
			'shipping_city'=>$user->getShippingCity(),
			'shipping_state'=>$user->getShippingState(),
			'shipping_zip'=>$user->getShippingZipCode(),
			'shipping_country'=>$user->getShippingCountryName(),
			'limelight_customer_id'=>$user->getCustomerId(),
			'main_order_id'=>$user->getMainOrderId(),
			'last_rebill_id'=>$user->getLastOrderId(),
		);
		
		$fields = MM_CustomField::getCustomFieldsList();
		foreach($fields as $id=>$val){
			$customField = new MM_CustomField($id);
			if($customField->isValid()){
				$fieldName = $customField->getFieldName();
				$value = $user->getCustomDataByName($fieldName);
				$userData[$fieldName] = $value;
	 		}
		}
		
		return new MM_Response($userData);
	}
	
	/***
	 * This function is called when a MemberMouse campaign has been modified
	 * 
	 * Required parameters:
	 * campaign_id - the campaign ID to update
	 * campaign_name - the name of the campaign
	 * campaign_description - the campaign description
	 * product_ids - a comma-deliminated list of associated product IDs
	 * countries - a comma-deliminated list of 2-digit ISO country codes
	 * payment_methods - a comma-deliminated list of payment method names
	 * shipping_methods - an array of objects with the properties {id, name} set
	 */
	public static function updateCampaign($data) 
	{
		$campaign = new MM_Campaign($data->campaign_id, true);
		
		switch($data->action_type){
			case "delete":
				if(!$campaign->isValid()){
					return new MM_Response("Invalid campaign id", MM_Response::$ERROR);
				}
				if(!$campaign->deactivateProducts()){
					return new MM_Response("Unable to deactivate products.", MM_Response::$ERROR);
				}
			break;
			case "add":
				// add new campaign to site
				$site = new MM_Site();
				if(intval($data->campaign_id)<=0){
					return new MM_Response("Invalid campaign id.", MM_Response::$ERROR);
				}
				$campaignIds = $site->getCampaignIds().",".$data->campaign_id;
				$site->setCampaignIds($campaignIds);
				$response = $site->commitData();
				if($response->type == MM_Response::$ERROR){
					$campaign->activateProducts();
					return $response;
				}
				else{
					MM_OptionUtils::setOption("mm-campaign_ids", $campaignIds);
				}
				
				//setup up campaign data for new campaign to system.
				$campaign->setName($data->campaign_name);
				$campaign->setDescription($data->campaign_description);
				$campaign->setProducts($data->product_ids);
				
				$rawData = array();
				$rawData["countries"] = $data->countries;
				$rawData["payment_name"] = $data->payment_methods;
				$rawData["shipping_id"] = "";
				$rawData["shipping_name"] = "";
				if(is_array($data->shipping_methods)) 
				{
					for($i = 0; $i < count($data->shipping_methods); $i++)
					{
						$rawData["shipping_id"] .= $data->shipping_methods[$i]->id;
						$rawData["shipping_name"] .= $data->shipping_methods[$i]->name;
						
						if($i < count($data->shipping_methods) - 1) {
							$rawData["shipping_id"] .= ",";
							$rawData["shipping_name"] .= ",";
						}
					}
				}
				
				$campaign->rawData = $rawData;
				$response = $campaign->commitData();
				
				return $response;
				
			break;
			case "edit":
				if(!$campaign->isValid()){
LogMe::write("APIService.updateCampaign() :  Invalid campaign ");
					return new MM_Response("Invalid campaign id", MM_Response::$ERROR);
				}
				$campaign->setName($data->campaign_name);
				$campaign->setDescription($data->campaign_description);
				$campaign->setProducts($data->product_ids);
				
LogMe::write("APIService.updateCampaign() :  Set campaign data.");		
				// transform data
				$rawData = array();
				$rawData["countries"] = $data->countries;
				$rawData["payment_name"] = $data->payment_methods;
				$rawData["shipping_id"] = "";
				$rawData["shipping_name"] = "";
				if(is_array($data->shipping_methods)) 
				{
					for($i = 0; $i < count($data->shipping_methods); $i++)
					{
						$rawData["shipping_id"] .= $data->shipping_methods[$i]->id;
						$rawData["shipping_name"] .= $data->shipping_methods[$i]->name;
						
						if($i < count($data->shipping_methods) - 1) {
							$rawData["shipping_id"] .= ",";
							$rawData["shipping_name"] .= ",";
						}
					}
				}
				
LogMe::write("APIService.updateCampaign() :  Committing.");	
				$campaign->rawData = $rawData;
				return $campaign->commitData();
			break;
		}
		return new MM_Response();
	}
	
	/***
	 * This function is called when a product that is assocaited with a MemberMouse campaign 
	 * has been modified
	 * 
	 * Required parameters:
	 * product_id - the product ID to update
	 * campaign_id - the product ID to update
	 * product_name - the name of the product
	 * product_sku - the SKU number associated with the product
	 * product_price - the price of the product
	 * product_description - the product description
	 * product_category - the product category
	 * is_free_trial - indicates whether the product is a free trial product (1 for yes, 0 for no)
	 * is_shippable - indicates whether the product is shippable (1 for yes, 0 for no)
	 * rebill_product_id - the product ID of the rebill product or 0 if none exists
	 * rebill_period - the lenth of the rebill cycle in days or 0 if the product is non-recurring
	 */
	public static function updateProduct($data) 
	{
		$product = new MM_Product();
 			
 		$product->setCampaignId($data->campaign_id);
 		$product->setProductId($data->product_id);
 		$product->setName($data->product_name);
 		$product->setSku($data->product_sku);
 		$product->setPrice($data->product_price);
 		$product->setDescription($data->product_description);
 		$product->setCategoryName($data->product_category);
 		$product->setIsTrial($data->is_free_trial);
 		$product->setIsShippable($data->is_shippable);
 		$product->setRebillProductId($data->rebill_product_id);
 		$product->setRebillPeriod($data->rebill_period);
 			
 		return $product->commitData();
	}
	
	
	private static function updateUsersOrder($user, $productId, $campaignId, $status){
		$product = new MM_Product();
		$product->getProductByCampaign($productId,$campaignId);
		$accessTagRow = $product->getAssociatedAccessTag();
		if(isset($accessTagRow->id) && intval($accessTagRow->id)>0){
			if(!$user->hasAccessTag($accessTagRow->id)){
				$user->removeAccessTag($accessTagRow->id);
			}
		}
		else{
			if($status == MM_MemberStatus::$OVERDUE){
				$whatToDo = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_EVENT_HANDLING_OVERDUE);
	 			if($whatToDo == MM_EventHandlingStatus::$OVERDUE_CHANGE){
					$user->setStatus(MM_MemberStatus::$OVERDUE);
	 			}
	 			else{
					$user->setStatus(MM_MemberStatus::$OVERDUE,true);
	 			}
			}
			else if($status == MM_MemberStatus::$CANCELED){
				$eventHandle = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_EVENT_HANDLING_CANCEL);
				if($eventHandle==MM_EventHandlingStatus::$CANCEL_HARD){
					$user->setStatus(MM_MemberStatus::$CANCELED);
				}
				else if($eventHandle==MM_EventHandlingStatus::$CANCEL_PAUSE){
					$user->setStatus(MM_MemberStatus::$PAUSED);
				}
			}
			else{
				$user->setStatus($status);	
			}
		}
		return $user;
	}
	
	private static function getUserByOrder($orderId){
		
		$user = new MM_User();
		$user->setMainOrderId($orderId);
		$user->getDataByOrderId();
		
		if(!$user->isValid())
		{
			$user->setLastOrder($orderId);
			$user->getDataByLastOrderId();
			
			if(!$user->isValid()){
				$userId = MM_User::getUserByAccessTagOrderId($orderId);
				$user = new MM_User($userId);
			}
			
			if(!$user->isValid()){
				$result = MM_LimeLightService::getOrder($orderId);
				$orderIds = explode(",", $result["child_id"]);
				if(count($orderIds)>0 && preg_match("/[0-9]+/", $result["child_id"])){
					for($i=0; $i<count($orderIds); $i++){
						if(intval($orderIds[$i])<=0){
							unset($orderIds[$i]);
						}
					}
					sort($orderIds, SORT_NUMERIC);
					$newOrderId = array_pop($orderIds);
					if(intval($newOrderId)>0 && $newOrderId!=$orderId){
						return self::getUserByOrder($newOrderId);
					}
				}
			}
		}
		
		return $user;
	}
	
	/***
	 * This function is called when an existing order associated with a MemberMouse campaign 
	 * has been modified or a new order has spawned from an existing order
	 * 
	 * Required parameters:
	 * main_order_id - this is the original order ID or ancestor ID associated with the order being updated
	 * new_order_id - if this is a rebill for an existing order, this is the ID of the new order or the child ID of the previous order. 
	 * 				  if this is not a rebill for an existing order, pass 0
	 * order_status - this is the numeric value representing the status of the order 
	 * 				  (Approved = 2, Voided/Refunded = 3, Declined = 7, Approved/Shipped = 8)
	 * is_recurring - 0 = Non-recurring Order, 1 = Recurring Order
	 * first_name - the first name of the customer
	 * last_name - the last name of the customer
	 * shipping_address - the shipping address of the customer
	 * shipping_city - the shipping city of the customer
	 * shipping_state - the shipping state of the customer
	 * shipping_zip - the shipping zip code of the customer
	 * shipping_country - the 2-digit ISO shipping country code of the customer
	 * billing_address - the billing address of the customer
	 * billing_city - the billing city of the customer
	 * billing_state - the billing state of the customer
	 * billing_zip - the billing zip code of the customer
	 * billing_country - the 2-digit ISO billing country code of the customer
	 * phone - the phone number of the customer
	 * time_stamp - the date/time the order was placed 
	 * cc_type - the credit card type used for the order
	 * cc_number - the last 4-digits of the credit card number
	 * cc_expires - the credit card expiration date in MMYY format
	 * order_total - the total price paid on the order
	 * 
	 * Optional Parameters:
	 * recurring_date - the next recurring date for this order if applicable in YYYY-MM-DD format
	 * shipping_id - the shipping ID associated with the order if applicable
	 */
	public static function updateOrder($data) 
	{
		$user = new MM_User();
		$user->setMainOrderId($data->main_order_id);
		$user->getDataByOrderId();
		
		$isAccessTag = false;
		if(!$user->isValid())
		{
			$userId = MM_User::getUserByAccessTagOrderId($data->main_order_id);
			$user = new MM_User($userId);
			
			if(!$user->isValid()){
				$user->setLastOrder($data->main_order_id);
				$user->getDataByLastOrderId();
			}
			else{
				$isAccessTag = true;
			}
		
			if(!$user->isValid())
			{
				return new MM_Response("Unable to locate member associated with order ID ".$data->main_order_id, MM_Response::$ERROR);
			}
		}
		$shouldCancel = false;
		if(!$isAccessTag){
			if(intval($data->order_status) == MM_Order::$STATUS_PARTIAL_REFUND || intval($data->order_status) == MM_Order::$STATUS_DECLINED || intval($data->order_status) == MM_Order::$STATUS_VOID_REFUND){

				$user->setIsRefunded("1");
			}
			else{
				$user->setIsRefunded("0");
			}
			
			if($data->is_recurring != 1) {
				$memberType = new MM_MemberType($user->getMemberTypeId());
				$productId = $memberType->getRegistrationProduct();
				
				$product = new MM_Product($productId);
				if($product->isRecurring()){
					$shouldCancel = true;
					$eventHandle = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_EVENT_HANDLING_CANCEL);
					if($eventHandle==MM_EventHandlingStatus::$CANCEL_HARD){
						$user->setStatus(MM_MemberStatus::$CANCELED);
					}
					else if($eventHandle==MM_EventHandlingStatus::$CANCEL_PAUSE){
						$user->setStatus(MM_MemberStatus::$PAUSED);
					}
				}
			}
		}
		else{
			if(intval($data->order_status) == MM_Order::$STATUS_PARTIAL_REFUND || intval($data->order_status) == MM_Order::$STATUS_DECLINED || intval($data->order_status) == MM_Order::$STATUS_VOID_REFUND){
				MM_AccessTag::setRefundedForUser($data->main_order_id, $user->getId());
			}
			else{
				MM_AccessTag::setNotRefundedForUser($data->main_order_id, $user->getId());
			}
			
			if($data->is_recurring != 1) {
				$applied = new MM_AppliedAccessTag();
				$applied->setOrderId($data->main_order_id);
				$applied->setRefId($user->getId());
				$applied->getDataByOrderAndUser();
				
				if($applied->getStatus()=="1"){
					$product = new MM_Product($applied->getProductId());
					if($product->isValid()){
						if($product->isRecurring()){
							$applied->setStatus("0");
							$applied->commitData();
						}
					}
					else{
						$result = MM_LimeLightService::getOrder($data->new_order_id);
						if(isset($result["main_product_id"])){
							$product->getProductByCampaign($result["main_product_id"],$result["campaign_id"]);
							if($product->isRecurring()){
								$applied->setProductId($result["main_product_id"]);
									$applied->setStatus("0");
								$applied->commitData();
							}
						}
					}
				}
			}
		}
		
		// update member status based on order status and recurring status
		if(intval($data->order_status) == MM_Order::$STATUS_APPROVED || intval($data->order_status) == MM_Order::$STATUS_APPROVED_SHIPPED )
		{
				LogMe::write("updateOrder() : ".__LINE__);
			$memberType = new MM_MemberType($user->getMemberTypeId());
			
			if($memberType->isValid())
			{
				LogMe::write("updateOrder() : ".__LINE__);
				if(!$shouldCancel){
					$user->setStatus(MM_MemberStatus::$ACTIVE);
				}	
				
				if($data->new_order_id>0){
				LogMe::write("updateOrder() : ".__LINE__);
					$result = MM_LimeLightService::getOrder($data->new_order_id);
					LogMe::write("updateOrder() : ".json_encode($result));
					if(isset($result["main_product_id"])){
						$product = new MM_Product();
						$product->getProductByCampaign($result["main_product_id"],$result["campaign_id"]);
						$accessTagRow = $product->getAssociatedAccessTag();
						LogMe::write("updateOrder() : accessTagRow: ".json_encode($accessTagRow));
						if(isset($accessTagRow->id) && intval($accessTagRow->id)>0){
							if(!$user->hasAccessTag($accessTagRow->id)){
								$user->addAccessTag($accessTagRow->id, $data->new_order_id);
							}
						}
					}
				}
			}
		}
		else if(intval($data->order_status) == MM_Order::$STATUS_PARTIAL_REFUND || intval($data->order_status) == MM_Order::$STATUS_VOID_REFUND){
			$result = MM_LimeLightService::getOrder($data->main_order_id);
			$product = new MM_Product();
			$product->getProductByCampaign($result["main_product_id"],$result["campaign_id"]);
			
			if($data->is_recurring != 1) {
				
				$shouldCancel = true;
				if(isset($result['amount_refunded_to_date']) && floatval($result["amount_refunded_to_date"])<$product->getPrice()){
					$shouldCancel = false;	
				}
				
				$user = self::updateUsersOrder($user, $result["main_product_id"], $result["campaign_id"], MM_MemberStatus::$ACTIVE);
				if(!$isAccessTag){
					if($shouldCancel){
						$eventHandle = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_EVENT_HANDLING_CANCEL);
						if($eventHandle==MM_EventHandlingStatus::$CANCEL_HARD){
							$user->setStatus(MM_MemberStatus::$CANCELED);
						}
						else if($eventHandle==MM_EventHandlingStatus::$CANCEL_PAUSE){
							$user->setStatus(MM_MemberStatus::$PAUSED);
						}
					}
				}
			}
			else{
				$orderIds = explode(",", $result["child_id"]);
				if(count($orderIds)>0 && preg_match("/[0-9]+/", $result["child_id"])){
					for($i=0; $i<count($orderIds); $i++){
						if(intval($orderIds[$i])<=0){
							unset($orderIds[$i]);
						}
					}
					sort($orderIds, SORT_NUMERIC);
					$result = MM_LimeLightService::getOrder(array_pop($orderIds));
				}
				$user = self::updateUsersOrder($user, $result["main_product_id"], $result["campaign_id"], MM_MemberStatus::$ACTIVE);
				$user->setStatus(MM_MemberStatus::$ACTIVE);
				$user->setIsRefunded("0");
			}
		}
		else{
			$memberType = new MM_MemberType($user->getMemberTypeId());
			
			if($data->main_order_id == $user->getMemberTypeId()){
				if($memberType->isValid())
				{
		 			$whatToDo = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_EVENT_HANDLING_OVERDUE);
		 			if($whatToDo == MM_EventHandlingStatus::$OVERDUE_CHANGE){
						$user->setStatus(MM_MemberStatus::$OVERDUE);
		 			}
		 			else{
						$user->setStatus(MM_MemberStatus::$OVERDUE,true);
		 			}
				}
			}
			else{
				$result = MM_LimeLightService::getOrder($data->main_order_id);
				$orderIds = explode(",", $result["child_id"]);
				if(count($orderIds)>0 && preg_match("/[0-9]+/", $result["child_id"])){
					for($i=0; $i<count($orderIds); $i++){
						if(intval($orderIds[$i])<=0){
							unset($orderIds[$i]);
						}
					}
					sort($orderIds, SORT_NUMERIC);
					$result = MM_LimeLightService::getOrder(array_pop($orderIds));
				}
				$user = self::updateUsersOrder($user, $result["main_product_id"], $result["campaign_id"], MM_MemberStatus::$OVERDUE);
			}
		}
		
		// update member data
		if(intval($data->new_order_id)>0){
			$user->setLastOrder($data->new_order_id);
			$user->setShippingAddress($data->shipping_address);
			$user->setShippingCity($data->shipping_city);
			$user->setShippingState($data->shipping_state);
			$user->setShippingZipCode($data->shipping_zip);
			$user->setShippingCountry($data->shipping_country);
			$user->setBillingAddress($data->billing_address);
			$user->setBillingCity($data->billing_city);
			$user->setBillingState($data->billing_state);
			$user->setBillingZipCode($data->billing_zip);
			$user->setBillingCountry($data->billing_country);
		}
		$user->setFirstName($data->first_name);
		$user->setLastName($data->last_name);
		$user->setPhone($data->phone);
		
					LogMe::write("updateOrder() : commiting");
		$user->doUpdateLL = false;
		$result = $user->commitData();
		
		if($result->type == MM_Response::$ERROR) {
					LogMe::write("updateOrder() : error");
			return $result;
		} 
		else {
			$retentionReport = new MM_RetentionReport();
			$retentionReport->getDataByOrderId($data->main_order_id);
			$retentionReport->setLastRebillDate(Date("Y-m-d h:i:s"));
			$retentionReport->commitData();
			return new MM_Response("Order updated successfully");
		}
	}
	
	public static function preAuthorizeOrder($data){
		$campaignId = $data->campaign_id;
		$productIds = $data->product_ids;
		$email = $data->email;
		
		$user = new MM_User();
		$user->setEmail($email);
		$user->getDataByEmail();
		
		if($user->isValid()){
			$productArr = explode(",", $productIds);
			foreach($productArr as $productId){
				$product = new MM_Product();
				if(intval($productId)<=0){
					continue;
				}
				$product->getProductByCampaign($productId, $campaignId);
				if($product->isValid()){
					$memberType = $product->getAssociatedMemberType();
					if(isset($memberType->id) && intval($memberType->id)>0){
						$memberTypeObj= new MM_MemberType($memberType->id);
						if($memberTypeObj->isValid()){
							if(!$memberTypeObj->isFree()){
								$existingMemberTypeId = $user->getMemberTypeId();
								$existingMemberTypeObj= new MM_MemberType($existingMemberTypeId);
								if($existingMemberTypeObj->isValid()){
									if($user->getStatus() == MM_MemberStatus::$ACTIVE){
										if(!$existingMemberTypeObj->isFree()){
											return new MM_Response("Member already exists with conflicting member type [".$memberType->id."].", MM_Response::$ERROR);	
										}
									}
								}
							}
						}
					}
				}
				
			} 	
		}
		return new MM_Response();
	}
	
	
	/***
	 * This function is called when a new order is placed for a product or products 
	 * associated with a MemberMouse campaign
	 * 
	 * Required parameters:
	 * customer_id - the Lime Light customer ID
	 * first_name - the first name of the customer
	 * last_name - the last name of the customer
	 * email - the customer's email address
	 * phone - the phone number of the customer
	 * shipping_address - the shipping address of the customer
	 * shipping_city - the shipping city of the customer
	 * shipping_state - the shipping state of the customer
	 * shipping_zip - the shipping zip code of the customer
	 * shipping_country - the 2-digit ISO shipping country code of the customer
	 * billing_address - the billing address of the customer
	 * billing_city - the billing city of the customer
	 * billing_state - the billing state of the customer
	 * billing_zip - the billing zip code of the customer
	 * billing_country - the 2-digit ISO billing country code of the customer
	 * order_id - the Lime Light order ID
	 * order_total - the total price paid on the order
	 * product_ids - a comma-deliminated list of product IDs purchased (at least 1 product ID is required)
	 */
	public static function newMember($data) 
	{
		$cpe = new MM_CorePageEngine();
		
		// determine what the customer purchased
		$products = explode(",", $data->product_ids);
		
		$memberTypeIds = array();
		$memberTypeProductIds = array();
		$accessTagIds = array();
		$accessTagProductIds = array();
		$invalidProductIds = array();
		$errorMsgs = "";
		$warningMsgs = "";
		
		for($i=0; $i < count($products); $i++)
		{
			$product = new MM_Product();
			$product->getProductByCampaign($products[$i],$data->campaign_id);
			
			if($product->isValid()) 
			{
				$mt = $product->getAssociatedMemberType();
				
				if($mt) 
				{
					$memberTypeIds[$mt->id] = $mt->id;
					array_push($memberTypeProductIds, $products[$i]);
					continue;
				}
				
				$tag = $product->getAssociatedAccessTag();
				
				if($tag) 
				{
					array_push($accessTagIds, $tag->id);
					array_push($accessTagProductIds, $products[$i]);
					continue;
				}
			}
			
			array_push($invalidProductIds, $products[$i]);
		}
		
		$doCreateUser = false;
		
		// If at least one product associated with a member type was purchased, use the first 
		// member type defined and create a new member. Otherwise, check to see if the member
		// exists by email and if they do, apply any access tags to that account. If not, create
		// a new account with the default member type and apply any access tags to that account.
		if(count($memberTypeIds) > 0 && is_array($memberTypeIds)) 
		{
			$tmpMemberTypeId = array_shift($memberTypeIds);
			$memberType = new MM_MemberType($tmpMemberTypeId);
			$doCreateUser = true;
		}
		else 
		{
			$user = new MM_User();
			$user->setEmail($data->email);
			$user->getDataByEmail();
			
			// user was not found so use default member type and create new user
			if(!$user->isValid()) {
				$memberType = new MM_MemberType();
				$memberType->getDefault();
				$doCreateUser = true;
			}
		}
		
		if(count($memberTypeIds)>1) 
		{
			$warningMsgs .= "- Multiple member types found associated with this order for product IDs ".join(", ", $memberTypeProductIds).". Member type '".$memberType->getName()."' was used.".MM_Email::$BR;
		}
		
		if(count($invalidProductIds))
		{
			$warningMsgs .= "- The following product IDs were ignored because they are not associated with a member type or access tag in MemberMouse: ".join(", ", $invalidProductIds).MM_Email::$BR;
		}
		
		if($doCreateUser)
		{
			if(!$memberType->isValid()) 
			{
				$msg = "Invalid member type found ".$memberType->getId();
				
				$errorMsgs .= $msg.MM_Email::$BR;
				MM_LimeLightUtils::sendErrorNoticeEmail($data->order_id, $errorMsgs, $warningMsgs);
				$memberType->getDefault();
			}
			
			$user = new MM_User();
			
			$user->setUserName($data->email);
			$user->setPassword(MM_Utils::createRandomString());
			$user->setEmail($data->email);
			$user->setFirstName($data->first_name);
			$user->setLastName($data->last_name);
			$user->setPhone($data->phone);
			
			$ipaddress = (isset($_SERVER["REMOTE_ADDR"]))?$_SERVER["REMOTE_ADDR"]:"";
			$user->setIpAddress($ipaddress);
			$user->setMainOrderId($data->order_id);
			$user->setCustomerId($data->customer_id);
			$user->setStatus(MM_MemberStatus::$ACTIVE);
			$user->setMemberTypeId($memberType->getId());
			
			$user->setBillingAddress($data->billing_address);
			$user->setBillingCity($data->billing_city);
			$user->setBillingState($data->billing_state);
			$user->setBillingZipCode($data->billing_zip);
			$user->setBillingCountry($data->billing_country);
			
			$user->setShippingAddress($data->shipping_address);
			$user->setShippingCity($data->shipping_city);
			$user->setShippingState($data->shipping_state);
			$user->setShippingZipCode($data->shipping_zip);
			$user->setShippingCountry($data->shipping_country);
			
			// LL passed a new member type for existing customer
			// if existing customer has a free MT, we'll upgrade them
			// otherwise throw error url
			$tmpUser = new MM_User();
			$tmpUser->setEmail($data->email);
			$tmpUser->getDataByEmail();

			$doUpdate = false;
			if($tmpUser->isValid()){
				$tmpMemberTypeId = $tmpUser->getMemberTypeId();
				$tmpMemberType = new MM_MemberType($tmpMemberTypeId);
				if($tmpMemberType->isValid()){
					if($tmpMemberType->isFree()){
						$user->setId($tmpUser->getId());
						$doUpdate = true;			
					}
				}
			}
		
			$response = $user->memberExists($doUpdate); 
			
			if($response->type == MM_Response::$ERROR)
			{
				$errorMsgs .= $response->message.MM_Email::$BR;
				MM_LimeLightUtils::sendErrorNoticeEmail($data->order_id, $errorMsgs, $warningMsgs);
				
				return new MM_Response("Error processing request: ".$response->message, MM_Response::$ERROR);
			}
			$user->doUpdateLL = false;
			$response = $user->commitData();
			
			if($response->type == MM_Response::$SUCCESS){
				/*
				 * $memberTypeProductIds $accessTagProductIds
				 */
				if(count($memberTypeProductIds)>0){
					for($i=0; $i<count($memberTypeProductIds); $i++){
						$tmpProduct =new MM_Product();
						$tmpProduct->getProductByCampaign($memberTypeProductIds[$i],$data->campaign_id);
						
						$orderHistory = new MM_OrderHistory();
						$orderHistory->setId($data->order_id);
						$orderHistory->setOrderDate(Date("Y-m-d h:i:s"));
						$orderHistory->setProductId($tmpProduct->getId()); //reference to local product
						$orderHistory->setUserId($user->getId());
						$orderHistory->commitData();
					}
				}
				
				if(count($accessTagProductIds)>0){
					for($i=0; $i<count($accessTagProductIds); $i++){
						$tmpProduct =new MM_Product();
						$tmpProduct->getProductByCampaign($accessTagProductIds[$i],$data->campaign_id);
						
						$orderHistory = new MM_OrderHistory();
						$orderHistory->setId($data->order_id);
						$orderHistory->setOrderDate(Date("Y-m-d h:i:s"));
						$orderHistory->setProductId($tmpProduct->getId()); //reference to local product
						$orderHistory->setUserId($user->getId());
						$orderHistory->commitData();
					}
				}
			}
			if($response->type == MM_Response::$ERROR)
			{
				$errorMsgs .= $response->message.MM_Email::$BR;
				MM_LimeLightUtils::sendErrorNoticeEmail($data->order_id, $errorMsgs, $warningMsgs);
				
				if(strlen($errorMsgs)>0){
					$user->setStatus(MM_MemberStatus::$LOCKED);
					$user->commitData();
				}
				
				return new MM_Response("Error processing request: ".$response->message, MM_Response::$ERROR);
			}
			
			$memberType->sendWelcomeEmail($user->getId());
		}
		
		// apply any valid access tags to user
		if(count($accessTagIds) > 0) 
		{
			for($i = 0; $i < count($accessTagIds); $i++) 
			{
				if($doCreateUser == false) {
					$result = $user->addAccessTag($accessTagIds[$i], $data->order_id, $accessTagProductIds[$i]);
				}
				else {
					$result = $user->addAccessTag($accessTagIds[$i]);
				}
				
				if(!$result) {
					$errorMsgs .= $response->message.MM_Email::$BR;
				}
			}
		}

		MM_LimeLightUtils::sendErrorNoticeEmail($data->order_id, $errorMsgs, $warningMsgs);
		
        MM_Session::value(MM_Session::$KEY_LAST_ORDER_ID, $data->order_id);
        MM_Session::value(MM_Session::$KEY_LAST_USER_ID, $user->getId());
		
        $params = array();
        
        $params["isFree"] = false;
        $params["refType"] = MM_TYPE_PRODUCT;
        $params["refId"] = "0";
        
		if(count($memberTypeProductIds) > 0)
		{
			$tmpProduct = new MM_Product();
			$tmpProduct->getProductByCampaign($memberTypeProductIds[0], $data->campaign_id);
			$params["refId"] = $tmpProduct->getId(); //$memberTypeProductIds[0];
		}
		else if(count($accessTagProductIds) > 0)
		{	
			$tmpProduct = new MM_Product();
			$tmpProduct->getProductByCampaign($accessTagProductIds[0], $data->campaign_id);
			$params["refId"] = $tmpProduct->getId();
		}
		$url = $cpe->getUrl(MM_CorePageType::$PAID_CONFIRMATION, $params);
		LogMe::write("newMember() : params : ".json_encode($params));
		LogMe::write("newMember() : memberTypeProductIds : ".json_encode($memberTypeProductIds));
		LogMe::write("newMember() : accessTagProductIds : ".json_encode($accessTagProductIds));
		LogMe::write("newMember() : url : ".$url);
		return new MM_Response(array('member_id'=>$user->getId(),'url'=>$url));
	}
	

	/*
	 * MemberController Handler
	 * 
	 */
	public static function createMember($data){
		LogMe::write("createMember() : ".json_encode($data));
		$post = array();
		$fields = MM_CustomField::getCustomFieldsList();
		foreach($fields as $id=>$val){
			$customField = new MM_CustomField($id);
			if($customField->isValid()){
				if($customField->getRequired() == '1'){
					$fieldName = $customField->getFieldName();
					if(!isset($data->$fieldName)){
						return new MM_Response("Custom field is missing: ".$fieldName, MM_Response::$ERROR);
					}
					else{
						$post["mm_custom_field_".$id] = $data->$fieldName;
					}
				}
	 		}
		}
		
		$memberTypeId = $data->member_type_id;
		$memberType = new MM_MemberType($memberTypeId);
		if(!$memberType->isValid()){
			return new MM_Response("Invalid member type.", MM_Response::$ERROR);
		}
		
		$user = new MM_User();
		$user->setEmail($data->email);
		$user->getDataByEmail();
		
		if($user->isValid()){
			return new MM_Response("user already exists.", MM_Response::$ERROR);
		}
		
		$post["mm_order_member_type"] = $memberTypeId;
		$post["mm_order_username"] = $data->email;
		$post["mm_order_password"] = MM_Utils::createRandomString();
		$post["mm_order_email"] = $data->email;
		$post["mm_order_first_name"] = $data->first_name;
		$post["mm_order_last_name"] = $data->last_name;
		$post["mm_order_phone"] = $data->phone;
		
		if(!$memberType->isFree()){
			$req = array('billing_address','billing_city','billing_state','billing_zip',
						'billing_country', 'shipping_address','shipping_city','shipping_state','shipping_zip',
						'shipping_country','payment_method','credit_number','exp_month','exp_year','security_code',
						'shipping_method'
			);
		
			foreach($req as $field){
				if(!isset($data->$field)){
					if(isset($data->shipping_same_as_billing)){
						if(strtoupper($data->shipping_same_as_billing)==MM_Order::$YES){
							if(preg_match("/(shipping_)/", $field)){
								continue;
							}
						}
					}
					return new MM_Response("Missing required field for paid product [".$field."].", MM_Response::$ERROR);
				}
			}
			$post["mm_order_billing_country"] = $data->billing_country;
			$post["mm_order_billing_address"] = $data->billing_address;
			$post["mm_order_billing_city"] = $data->billing_city;
			$post["mm_order_billing_state"] = $data->billing_state;
			$post["mm_order_billing_zip"] = $data->billing_zip;
			
			$post["mm_order_shipping_same_as_billing"] = (isset($data->shipping_same_as_billing) && $data->shipping_same_as_billing==MM_Order::$YES)?$data->shipping_same_as_billing:MM_Order::$NO;
			if($post["mm_order_shipping_same_as_billing"] == MM_Order::$NO){
				$post["mm_order_shipping_country"] = $data->shipping_country;
				$post["mm_order_shipping_address"] = $data->shipping_address;
				$post["mm_order_shipping_city"] = $data->shipping_city;
				$post["mm_order_shipping_state"] = $data->shipping_state;
				$post["mm_order_shipping_zip"] = $data->shipping_zip;
			}
			else{
				$post["mm_order_shipping_country"] = $data->billing_country;
				$post["mm_order_shipping_address"] = $data->billing_address;
				$post["mm_order_shipping_city"] = $data->billing_city;
				$post["mm_order_shipping_state"] = $data->billing_state;
				$post["mm_order_shipping_zip"] = $data->billing_zip;
			}
			$post["mm_order_payment_method"] = $data->payment_method;
			$post["mm_order_cc_number"] = $data->credit_number;
			$post["mm_order_cc_exp_month"] = $data->exp_month;
			$post["mm_order_cc_exp_year"] = $data->exp_year;
			$post["mm_order_cc_security_code"] = $data->security_code;
			$post["mm_order_shipping_method"] = $data->shipping_method;
			if(isset($data->order_payment_choice)){
				$post["mm_order_payment_choice"] = $data->order_payment_choice;
			}
			else{
				$post["mm_order_payment_choice"] = 0;
			}
		}
		return MM_TransactionEngine::placeNewOrder($post);
	}

	/*
	 * MemberController Handler
	 * 
	 */
	public static function updateMember($data){
		$user = new MM_User();
		$user->setEmail($data->email);
		$user->getDataByEmail();
		
		if(!$user->isValid()){
			return new MM_Response("Invalid user, could not find {$data->email}", MM_Response::$ERROR);
		}	
		
		if(isset($data->first_name)){
			$user->setFirstName($data->first_name);
		}
		if(isset($data->last_name)){
			$user->setLastName($data->last_name);
		}
		if(isset($data->phone)){
			$user->setPhone($data->phone);
		}
		
		if(isset($data->password)){
			$user->setPassword($data->password);
		}
		
		// billing
		if(isset($data->billing_country)){
			$user->setBillingCountry($data->billing_country);
		}
		if(isset($data->billing_address)){
			$user->setBillingAddress($data->billing_address);
		}
		if(isset($data->billing_city)){
			$user->setBillingCity($data->billing_city);
		}
		if(isset($data->billing_state)){
			$user->setBillingState($data->billing_state);
		}
		if(isset($data->billing_zip)){
			$user->setBillingZipCode($data->billing_zip);
		}
		
		// shipping
		if(isset($data->shipping_country)){
			$user->setShippingCountry($data->shipping_country);
		}
		if(isset($data->shipping_address)){
			$user->setShippingAddress($data->shipping_address);
		}
		if(isset($data->shipping_city)){
			$user->setShippingCity($data->shipping_city);
		}
		if(isset($data->shipping_state)){
			$user->setShippingState($data->shipping_state);
		}
		if(isset($data->shipping_zip)){
			$user->setShippingZipCode($data->shipping_zip);
		}
		
		//custom field update
	
		$fields = MM_CustomField::getCustomFieldsList();
		foreach($fields as $id=>$val){
			$customField = new MM_CustomField($id);
			if($customField->isValid()){
				$fieldName = $customField->getFieldName();
				if($customField->getRequired() == '1'){
					if(isset($data->$fieldName) && !empty($data->$fieldName)){
						$user->setCustomData($id, $data->$fieldName);
					}	
				}
				else{
					if(isset($data->$fieldName)){
						$user->setCustomData($id, $data->$fieldName);
					}
				}
	 		}
		}
		
		// commit
		$user->doUpdateLL = false;
		
		if(isset($data->status)){
			$previousStatus = $user->getStatus();
			$user->setStatus($data->status);
			
			switch($data->status){
				case MM_MemberStatus::$ACTIVE:
					if($previousStatus!= MM_MemberStatus::$ACTIVE){
						$memberDetails = new MM_MemberDetailsView();
						
						$post = array(
							'mm_id'=>$user->getId(),
							'mm_order_id'=> $user->getLastOrderId(false),
						);
						$result = $memberDetails->activateMembership($post);
						if($result instanceof MM_Response) {
							return $result;
						}
						return $user->commitData();
					}
					return new MM_Response();
				break;
				case MM_MemberStatus::$CANCELED:
				case MM_MemberStatus::$OVERDUE:
				case MM_MemberStatus::$LOCKED:
					if($previousStatus != MM_MemberStatus::$OVERDUE && $previousStatus != MM_MemberStatus::$LOCKED && $previousStatus != MM_MemberStatus::$CANCELED){
						$lastOrderId = $user->getLastOrderId();
						$paymentEngine = new MM_PaymentEngine(0);
						$result = $paymentEngine->updateOrderRecurring($lastOrderId, MM_LimeLightService::$REBILL_STATUS_STOP);
						if($result->type == MM_Response::$SUCCESS){
							return $user->commitData();
						}
						return $result;
					}
					return new MM_Response();
				break;
				
			}
		}
		return $user->commitData();
	}
}
