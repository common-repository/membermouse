/**
 * 
 * 
MemberMouse(TM) (http://www.membermouse.com)
(c) 2010-2011 Pop Fizz Studios, LLC. All rights reserved.
 */
class MM_UnitTestEngine{
	private static function excludedFunctions($method, $objName=""){
		$prefix = $objName;
		if(!empty($objName) && !preg_match("/(\:\:)$/", $objName)){
			$prefix = $objName."::";
		}
		$funcs = array(
			'setData'=>1,
			'setId'=>1,
			'setCustomData'=>1,
		);
		return (isset($funcs[$prefix.$method]));
	}
	
	private function getRandomMemberType($subtype="paid", $excludeArr=null){
		$memberTypes = MM_MemberType::getMemberTypesList(true, $subtype);
		$memberTypesList = array();
		
		if(is_array($memberTypes) && is_array($excludeArr)){
			foreach($memberTypes as $id=>$name){
				if(!isset($excludeArr[$id])){
					$memberTypesList[$id] = $name;
				}
			}
		}
		else{
			$memberTypesList =$memberTypes;
		}
		
		
		if(empty($memberTypesList)){
			return new MM_Response("Could not find a paid member type to test with.",MM_Response::$ERROR);
		}
		
		$randIndex = rand(0, count($memberTypesList)-1);
		$arrayKeys = array_keys($memberTypesList);
		
		return new MM_MemberType($arrayKeys[$randIndex]);
	}
	
	private function getPostArr(){
		$memberType = $this->getRandomMemberType();
		if($memberType instanceof MM_Response){
			return $memberType;
		}
		$post = array(
			'mm_order_member_type'=> $memberType->getId(),
			'mm_order_username' =>MM_Utils::createRandomString(7),
			'mm_order_password' =>MM_Utils::createRandomString(7),
			'mm_order_email' =>MM_Utils::createRandomString(7)."@apiunittest.com",
			'mm_order_first_name' =>MM_Utils::createRandomString(7,true),
			'mm_order_last_name' =>MM_Utils::createRandomString(7,true),
			
			'mm_order_billing_country' =>'US',
			'mm_order_billing_address' =>'Unit test ave',
			'mm_order_billing_city' =>'Myrtle Beach',
			'mm_order_billing_state' =>'SC',
			'mm_order_billing_zip' =>'12311',
			
			'mm_order_shipping_country' =>'US',
			'mm_order_shipping_address' =>'Unit test shipping ave',
			'mm_order_shipping_city' =>'Hertford',
			'mm_order_shipping_state' =>'NC',
			'mm_order_shipping_zip' =>'43221',
		
			'mm_order_phone' =>MM_Utils::createRandomString(10,false,true),
			'mm_order_payment_method' =>'visa',
			'mm_order_cc_number' =>rand(1000,9999).rand(1000,9999).rand(1000,9999).rand(1000,9999),
			'mm_order_cc_exp_month' =>Date("m"),
			'mm_order_cc_exp_year' =>substr(Date("Y"),2),
			'mm_order_cc_security_code' =>MM_Utils::createRandomString(3, false, true),
			'mm_order_shipping_method' =>'1',
			'mm_order_shipping_same_as_billing' =>'0',
		);
		
		return $post;
		
	}
	
	public function runCustomTest(){
		global $current_user;
		
		$br = "\n\n";
		$responses = "******* Core Page URLs ******{$br}";
		
		$corePageEngine = new MM_CorePageEngine();
		$memberTypes = MM_MemberType::getMemberTypesList(true);
		
		//Defaults
		$responses.= "-Defaults{$br}";
		
		$url = $corePageEngine->getUrl(MM_CorePageType::$MEMBER_HOME_PAGE);
		$responses.= "--Member Home Page for Default: ".$url.$br;
		
		$url = $corePageEngine->getUrl(MM_CorePageType::$REGISTRATION);
		$responses.= "--Registration Page for Default: ".$url.$br;
		
		$url = $corePageEngine->getUrl(MM_CorePageType::$LOGIN_PAGE);
		$responses.= "--Login Page for Default: ".$url.$br;
		
		$url = $corePageEngine->getUrl(MM_CorePageType::$CANCELLATION);
		$responses.= "--Cancellation Page for Default: ".$url.$br;
		
		$params["isFree"] = 0;
		$params["refType"] = 0;
		$params["refId"] = 0;
		
		$url = $corePageEngine->getUrl(MM_CorePageType::$PAID_CONFIRMATION, $params);
		$responses.= "Paid Confirmation Page for Default: ".$url.$br;
		
		// Member Type Specific
		$responses.= "-Member Type Specific{$br}";
		foreach($memberTypes as $id=>$name){
			$preview = new MM_Preview();
			$preview->setData($current_user->ID,0, $id, array());
			
			$url = $corePageEngine->getUrl(MM_CorePageType::$MEMBER_HOME_PAGE);
			$responses.= "--Member Home Page for {$name}: ".$url.$br;
			
			$url = $corePageEngine->getUrl(MM_CorePageType::$CANCELLATION);
			$responses.= "--Cancellation Page for {$name}: ".$url.$br;
			
			$memberType = new MM_MemberType($id);
			$params["isFree"] = $memberType->isFree();
	        $refType = 	MM_TYPE_PRODUCT;
	        $typeId = $memberType->getRegistrationProduct();
	        if((bool)$params["isFree"]){
	        	$refType = 	MM_TYPE_MEMBER_TYPE;
	        	$typeId= $memberType->getId();
	        }
			$params["refType"] = $refType;
			$params["refId"] = $typeId;
			
			$url = $corePageEngine->getUrl(MM_CorePageType::$PAID_CONFIRMATION, $params);
			$responses.= "--Confirmation Page for {$name}: ".$url.$br;
		}
		return $responses;
	}
	
	public function runProcessTest(){
		$responses = "";
		
		$response = $this->runMembershipTest();
		if($response instanceof MM_Response){
			return new MM_Response("Membership Error(s): ".$response->message, MM_Response::$ERROR);
		}
		$responses.= $response;
		
		$response = $this->runProtectedContentTest();
		if($response instanceof MM_Response){
			return new MM_Response("Protected Content Error(s): ".$response->message, MM_Response::$ERROR);
		}
		$responses.= $response;
		
		$response = $this->runSmartTagTest();
		if($response instanceof MM_Response){
			return new MM_Response("Smart Tag Error(s): ".$response->message, MM_Response::$ERROR);
		}
		$responses.= $response;
		return $responses;
	}
	
	private function runProtectedContentTest(){
		global $wpdb,$current_user;
		$br = "\n\n";
		$responses = "******* Protected Content Test ******{$br}";
		
		$sql = "select * from ".MM_TABLE_POSTS_ACCESS." where is_smart_content='0' order by RAND() limit 3";
		$rows = $wpdb->get_results($sql);
		if(!is_array($rows)){
			$responses.= "No protected posts.{$br}";
			return $responses;
		} 
		
		$memberTypes = MM_MemberType::getMemberTypesList(true);
		$pc = new MM_ProtectedContentEngine();
		
		$preview = new MM_Preview();
 	 	
		foreach($rows as $row){
			$post = get_post($row->post_id);
			if(isset($post->ID)){
				$responses.= "Checking protected post/page ".$post->post_title." [".$row->post_id."] ".$br;
				foreach($memberTypes as $id=>$name){
					$days = rand(0,50);
					$mt = new MM_MemberType($id);
					$mtAt = $mt->getAccessTags();
			 	 	$tags = array();
			 	 	if(is_array($mtAt) || is_object($mtAt))
			 	 	{
				 	 	foreach($mtAt as $k=>$v)
				 	 	{
				 	 		$tags[$k] = $days;
				 	 	}
		 	 		}
					$preview->setData($current_user->ID,$days, $id, $tags);
					
					$canAccess = ($pc->canAccessPost($post->ID,$current_user->ID))?"Access Granted":"Access Denied";	
					$responses.= "-- Member Type: ".$mt->getName().", Days as Member: {$days}, Tags: ".implode($tags)." : <b>{$canAccess}</b>{$br}";
				}
			}
		}
		return $responses;
	}
	
	private function runSmartTagTest(){
		global $current_user, $wpdb;
		$br = "\n\n";
		$responses = "************** Testing Smart Tags *************{$br}";
		$emailAccount = new MM_EmailAccount();
		$emailAccount->getDefaultAccount();
		
		$memberType = $this->getRandomMemberType("");
		
		$userObj = new MM_User();
		$userObj->setMemberTypeId($memberType->getId());
		$userObj->setFirstName("John");
		$userObj->setLastName("Doe");
		$userObj->setPhone("(123) 123-1234");
		$userObj->setEmail(MM_Utils::createRandomString(7)."@unittest.com");
		$userObj->setPassword(MM_Utils::createRandomString(7));
		$userObj->setUsername(MM_Utils::createRandomString(7));
		$userObj->setStatus("1");
		$userObj->setBillingAddress("1 membermouse ave.");
		$userObj->setBillingCity("New York");
		$userObj->setBillingState("NY");
		$userObj->setBillingZipCode("12345");
		$userObj->setBillingCountry(MM_LimeLightUtils::$COUNTRY_ID_US);
		$userObj->setShippingAddress("1 membermouse ave.");
		$userObj->setShippingCity("New York");
		$userObj->setShippingState("NY");
		$userObj->setShippingZipCode("12345");
		$userObj->setShippingCountry(MM_LimeLightUtils::$COUNTRY_ID_US);
		$response = $userObj->commitData();
		if($response instanceof MM_Response && $response->type==MM_Response::$ERROR){
			return $response;
		}
		
		
		$context = new MM_Context($userObj, $emailAccount);
		$sql = "select * from ".MM_TABLE_SMARTTAGS." where group_id='5' order by RAND() limit 5";
		$rows = $wpdb->get_results($sql);
		if(!is_array($rows)){
			return new MM_Response("Could not find ANY smart tags in the system.", MM_Response::$ERROR);
		}
		
		$content = "";
		foreach($rows as $row){
			$content = "[".$row->name."]";
			$responses.="-- Testing tag [".$row->name."], result: ".MM_SmartTagEngine::processContent($content,$context).$br;
		}
		$responses.= "User data to validate: ".$br;
		$methods = get_class_methods($userObj);
		foreach($methods as $method){
			if(preg_match("/(getShipping|getBilling|getPhone|getUsername|getLastName|getFirstName|getMemberType|getEmail|getPassword|getStatus)/", $method)){
				$userRes = call_user_func_array(array($userObj, $method), array());
				$responses.="-- {$method} : {$userRes}{$br}";
			}
		}
		
		$response = $userObj->delete();
		if($response instanceof MM_Response && $response->type==MM_Response::$ERROR){
			return $response;
		}
		
		return $responses;
	}
	
	private function runMembershipTest(){
		
		$br = "\n\n";
		$responses = "";
		
		// New Member Purchase
		$post = $this->getPostArr();
		if($post instanceof MM_Response){
			return $post;
		}
		
		$responses .= "****Simulating new paid registration ********".$br;
		$response = MM_TransactionEngine::placeNewOrder($post);
		$userId = MM_Session::value(MM_Session::$KEY_LAST_USER_ID);
		
		if(intval($userId)>0 && $response->type != MM_Response::$ERROR){
			$responses .= json_encode($response).$br;
			
			$responses .= "****Simulating change membership ********".$br;
			$memberType = $this->getRandomMemberType(MM_MemberType::$SUB_TYPE_PAID, $post["mm_order_member_type"]);
			$newPost = array(
				'mm_id'=>$userId,
				'mm_new_membership_selection'=>$memberType->getId(), 
			);
			if($post instanceof MM_Response){
				return new MM_Response("Could not change membership: ".$memberType->message, MM_Response::$ERROR);
			}
			
			$membership = new MM_MembershipView();
			$response = $membership->changeMembership($newPost);
		
			if($response instanceof MM_Response && $response->type == MM_Response::$ERROR){
				return new MM_Response("Could not change membership: ".$memberType->message, MM_Response::$ERROR);
			}
			$responses .= json_encode($response).$br;
			
			$responses .= "**** Lime Light cancel order and local delete. ********".$br;
		
			$user = new MM_User($userId);
			if(!$user->isValid()){
				return new MM_Response("Invalid user [".$userId."].", MM_Response::$ERROR);
			}
			$lastOrderId = $user->getLastOrderId();
			if(intval($lastOrderId)<=0){
				$lastOrderId = $user->getMainOrderId();
			}
			$responses .= $userId." updateOrderRecurring {$lastOrderId}{$br}";
			$result = MM_LimeLightService::updateOrderRecurring($lastOrderId, MM_LimeLightService::$REBILL_STATUS_STOP);
			
			if($result->type == MM_Response::$ERROR) {
				return $result;
			}
			
			$mmDetailsView = new MM_MemberDetailsView();
			$result = $mmDetailsView->changeMemberStatus($newPost, MM_MemberStatus::$CANCELED);
		
			if($result instanceof MM_Response && $result->type == MM_Response::$ERROR){
				return new MM_Response("Could not cancel membership: ".$result->message, MM_Response::$ERROR);
			}
			$responses .= json_encode($result).$br;
			$response = $user->delete();
			
			if($response->type == MM_Response::$ERROR){
				return $response;
			}
			$responses .= json_encode($response).$br;
			
		}
		else{
			if($response instanceof MM_Response){
				return $response;
			}
			return new MM_Response("Could not create a new order ",MM_Response::$ERROR);
		}
		
		return $responses;
	}
	
	public function runEntityTest($obj){
		$br = "\n\n";
		$msg = "********************".$br;
		
		//create member
		$funcs= $this->getMethods($obj);
		foreach($funcs as $func){
			LogMe::write("runEntityTest() : ".$func[1]."('".$func[2]."')");
			call_user_func_array(array($func[0], $func[1]), array($func[2]));
		}
		
		$response = $obj->commitData();
		if($response instanceof MM_Response){
			if($response->type == MM_Response::$ERROR){
				return $response;
			}
		}
		$msg .= "New ".get_class($obj)." was created ".$obj->getId()." ".$br;
		
		//Update Member
		$updates = "";
		shuffle($funcs);
		$max = (count($funcs)<=10)?count($funcs):10;
		for($i=0; $i<$max; $i++){
			LogMe::write("runEntityTest() : ".$funcs[$i][1]."('".$funcs[$i][2]."')");
			$updates.= $funcs[$i][1]." set to ".$funcs[$i][2]." ".$br;
			call_user_func_array(array($funcs[$i][0], $funcs[$i][1]), array($funcs[$i][2]));
		}
		
		$response = $obj->commitData();
		if($response instanceof MM_Response){
			if($response->type == MM_Response::$ERROR){
				return $response;
			}
		}
		$msg .= "Updated ".get_class($obj).": ".$updates." ".$br;
		
		if(method_exists($obj, "delete")){
			$response = $obj->delete();
			if($response instanceof MM_Response){
				if($response->type == MM_Response::$ERROR){
					return $response;
				}
			}
			else{
				if(!$response){
					return new MM_Response("Error deleting ".get_class($obj), MM_Response::$ERROR);
				}
			}
			$msg.= "Deleted ".get_class($obj)." ".$obj->getId()." ".$br;
		}
		else{
			$msg.= "No delete function for ".get_class($obj).", reference id: ".$obj->getId().$br;
		}
		
		$msg .= "********************".$br;
		return $msg;
	}
	
	private function getMethods($obj){
		$funcs = array();
		if(class_exists(get_class($obj))){
			$methods = get_class_methods($obj);
			foreach($methods as $method){
				if(preg_match("/^(set)/", $method)){
					$param = MM_Utils::createRandomString(7);
					if(method_exists($obj, $method) && !self::excludedFunctions($method)){
						LogMe::write("runEntityTest() : ".$method."('".$param."')");
						$funcs[] = array($obj, $method, $param);
					}
				}
			}
		}
		return $funcs;
	}
}