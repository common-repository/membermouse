/**
 * 
 * 
MemberMouse(TM) (http://www.membermouse.com)
(c) 2010-2011 Pop Fizz Studios, LLC. All rights reserved.
 */
class MM_CorePageEngine
{	
	public static function isRegistrationCorePage($pageId){
		$registrationPageId = self::getCorePageId(MM_CorePageType::$REGISTRATION, "", "");
		if($registrationPageId == $pageId){
			return true;
		}
		return false;
	}
	
	public static function isMyAccountCorePage($pageId){
		$myAccountPageId = self::getCorePageId(MM_CorePageType::$MY_ACCOUNT, "", "");
		
		if($myAccountPageId == $pageId){
			return true;
		}
		return false;
	}
	
	public static function isErrorCorePage($pageId){
		$errorPageId = self::getCorePageId(MM_CorePageType::$ERROR, "", "");
		
		if($errorPageId == $pageId){
			return true;
		}
		return false;
	}
	
	public static function isConfirmationPage($pageId){
		if(self::isCorePage($pageId, MM_CorePageType::$FREE_CONFIRMATION)){
			return true;
		}
		if(self::isCorePage($pageId, MM_CorePageType::$PAID_CONFIRMATION)){
			return true;
		}
		return false;
	}
	
	public static function redirectToCancellationPage($pageId){
		global $wpdb;
		
		$cpe = new MM_CorePageEngine();
		$userObj = $cpe->getUserObject();
		
		if(is_null($userObj))
			return false;
			
		// is $pageId a cancellation type core page?
		$sql = "select count(*) as total from ".MM_TABLE_CORE_PAGES." cp where cp.page_id='{$pageId}' and core_page_type_id = '".MM_CorePageType::$CANCELLATION."'";
		$row = $wpdb->get_row($sql);
		
		if($row===false || ($row->total<=0)){
			return false;
		}
		// if it is, does the user have a more specific page?
		$memberTypeId = $userObj->getMemberTypeId();
		$specificPageId = $cpe->getCorePageIdByRefType(MM_CorePageType::$CANCELLATION, MM_TYPE_MEMBER_TYPE, $memberTypeId);
		if($pageId!= $specificPageId){
			$url = "";
			if(intval($pageId)>0)
			{
				$url = $cpe->getFormattedUrl($specificPageId);
			}	
			if(!empty($url)){
				wp_redirect($url);
				exit;
			}
		}
	}
	
	/**
	 * This function is for on-the-fly redirection based on whether or not 
	 * the user may be going to the home page.  
	 */
	public static function redirectToHomePage($force=false)
	{	
		global $current_user;
		$cp = new MM_CorePageEngine();
		
		if($force){
			$corePageTypeId = MM_CorePageType::$MEMBER_HOME_PAGE;
		}
		else{
			$corePageTypeId = $cp->determineCorePage();
		}

		if(isset($current_user->ID) && intval($current_user->ID)>0){
			if($corePageTypeId == MM_CorePageType::$MEMBER_HOME_PAGE)
			{
				$url = $cp->getUrl($corePageTypeId);
				if(!empty($url)){
					LogMe::write("redirectToHomePage() : ".$url);
					wp_redirect($url);
					exit;
				}
			}
		}
	}
	
	public function saveCorePages($id,$post)
	{	
		//// save core page data if necessary
		if($post->post_status != 'auto-draft'
			&& false === (wp_is_post_autosave($post) || wp_is_post_revision($post))
			&& isset($_POST['save-mm-corepages-nonce']) && wp_verify_nonce($_POST['save-mm-corepages-nonce'], 'save-mm-corepages')) 
		{
			$corePageView = new MM_CorePagesView();
			
			if(isset($_POST["save-mm-corepages"]["core_page_type_id"]) && intval($_POST["save-mm-corepages"]["core_page_type_id"])>0)
			{
				$corePageView->saveCorePage($post);
			}
			else if(isset($_POST["save-mm-corepages"]["core_page_type_id"]) && intval($_POST["save-mm-corepages"]["core_page_type_id"])=='')
			{
				$corePageEngine = new MM_CorePageEngine();
				if(!MM_CorePage::isDefaultCorePage($_POST["post_ID"]))
					$corePageEngine->removeCorePageById($_POST["post_ID"]);
			}
		}
	}
	
	public static function isFrontPage(){
		
		$showOnFront = MM_OptionUtils::getOption("show_on_front");
		if(is_front_page()){
			return true;
		}
		else if($showOnFront == "posts" && is_home()){
			return true;
		}
		
		return false;
	}
	
	private function determineCorePage()
	{	
		global $wp_query;	
		if(isset($wp_query->post->ID) && intval($wp_query->post->ID)>0){ 
			$postId = $wp_query->post->ID;
//			echo $postId;
			$showOnFront = MM_OptionUtils::getOption("show_on_front");
			
			if(is_front_page()){
				return MM_CorePageType::$MEMBER_HOME_PAGE;
			}
			else if($showOnFront == "posts" && is_home()){
				return MM_CorePageType::$MEMBER_HOME_PAGE;
			}
		}
		return MM_CorePageType::$NO_PAGE;
	}
	
	private static function getAjaxMethod($corePageTypeId)
	{
		switch($corePageTypeId)
		{
			case MM_CorePageType::$ERROR:
				return "getErrorPageRules";
			case MM_CorePageType::$MEMBER_HOME_PAGE:
				return "getHomePageRules";
				
			case MM_CorePageType::$MY_ACCOUNT:
				return "getMyAccountRules";
				
			case MM_CorePageType::$REGISTRATION:
				return "getRegistrationPage";
				
			case MM_CorePageType::$LOGIN_PAGE:
				return "getLoginPage";
				
			case MM_CorePageType::$LOGOUT_PAGE:
				return "getLogoutPage";
				
			case MM_CorePageType::$FORGOT_PASSWORD:
				return "getForgotPasswordPage";
				
			case MM_CorePageType::$LIMELIGHT_SUCCESS:
				return "getLimeLightPage";
			
			case MM_CorePageType::$PAID_CONFIRMATION:
			case MM_CorePageType::$FREE_CONFIRMATION:
				return "getConfirmationRules";
				
			case MM_CorePageType::$CANCELLATION:
				return "getCancellationPage";
			
			default:
				return "undefinedAction";
		}
	}
	
	private static function throwLimeLightError($error, $errorPageUrl="", $asUrl=true)
	{
		if($asUrl)
		{
			$url = MM_Utils::appendUrlParam($errorPageUrl, MM_Session::$PARAM_MESSAGE_KEY, $error);
			return new MM_Response($url);
		}
		else
		{
			return new MM_Response($error, MM_Response::$ERROR);
		}
	}
	
	public static function processLimeLightSuccess($fromMM=true)
	{	
		$req = array(
			'order_id', 'amount', 'e_mail', 'Customer_Id', 'Bill_First', 'Bill_Last', 'Bill_Address1',
			'Bill_City', 'Bill_State', 'Bill_Zip', 'Bill_Country', 'Bill_Phone', 'Bill_Email', 'Ship_First',
			'Ship_Last', 'Ship_Address1', 'Ship_City', 'Ship_State', 'Ship_Zip', 'Ship_Country',
			'product1Id'
		);
		
		$cpe = new MM_CorePageEngine();
		$errorPageUrl = $cpe->getUrl(MM_CorePageType::$ERROR, '');
		
		foreach($req as $field)
		{
			if(!isset($_REQUEST[$field]))
			{
				return self::throwLimeLightError("Error processing request:<br/>'".$field."' is required.",$errorPageUrl, $fromMM);
			}
		}
		
		foreach($_REQUEST as $k=>$v)
		{
			$key  = strtolower($k);
			$$key = urldecode($v);
		}
		
		// determine what the customer purchased
		$ctr = 1;
		$memberTypeIds = array();
		$memberTypeProductIds = array();
		$accessTagIds = array();
		$accessTagProductIds = array();
		$invalidProductIds = array();
		$errorMsgs = "";
		$warningMsgs = "";
		
		while(isset(${"product".$ctr."id"})) 
		{
			$product = new MM_Product(${"product".$ctr."id"});
			
			if($product->isValid()) 
			{
				$mt = $product->getAssociatedMemberType();
				
				if($mt) 
				{
					array_push($memberTypeIds, $mt->id);
					array_push($memberTypeProductIds, ${"product".$ctr."id"});
					$ctr++;
					continue;
				}
				
				$tag = $product->getAssociatedAccessTag();
				
				if($tag) 
				{
					array_push($accessTagIds, $tag->id);
					array_push($accessTagProductIds, ${"product".$ctr."id"});
					$ctr++;
					continue;
				}
			}
			
			array_push($invalidProductIds, ${"product".$ctr."id"});
			$ctr++;
		}
		
		$doCreateUser = false;
		
		// If at least one product associated with a member type was purchased, use the first 
		// member type defined and create a new member. Otherwise, check to see if the member
		// exists by email and if they do apply any access tags to that account. If not, create
		// a new account with the default member type and apply any access tags to that account.
		if(count($memberTypeIds) > 0) 
		{
			$memberType = new MM_MemberType($memberTypeIds[0]);
			$doCreateUser = true;
		}
		else 
		{
			$user = new MM_User();
			$user->setEmail($e_mail);
			$user->getDataByEmail();
			
			// user was not found so use default member type and create new user
			if(!$user->isValid()) {
				$memberType = new MM_MemberType();
				$memberType->getDefault();
				$doCreateUser = true;
			}
		}
		
		if(count($memberTypeIds)) 
		{
			$warningMsgs .= "- Multiple member types found associated with this order for product IDs ".join(", ", $memberTypeProductIds).". Member type '".$memberType->getName()."' was used.".MM_Email::$BR;
		}
		
		if(count($invalidProductIds))
		{
			$warningMsgs .= "- The following product IDs were ignored because they are not associated with a member type or access tag in MemberMouse: ".join(", ", $invalidProductIds).MM_Email::$BR;
		}
		
		if($doCreateUser)
		{
			if(!$memberType->isValid()) 
			{
				$msg = "Invalid member type found ".$memberType->getId();
				
				$errorMsgs .= $msg.MM_Email::$BR;
				MM_LimeLightUtils::sendErrorNoticeEmail($order_id, $errorMsgs, $warningMsgs);
				
				$url = MM_Utils::appendUrlParam($errorPageUrl, MM_Session::$PARAM_MESSAGE_KEY, "Error processing request:<br/>".$msg);
				return new MM_Response($url);
			}
			
			$user = new MM_User();
			
			$user->setUserName($e_mail);
			$user->setPassword(MM_Utils::createRandomString());
			$user->setEmail($e_mail);
			$user->setFirstName($bill_first);
			$user->setLastName($bill_last);
			$user->setPhone($bill_phone);
			
			$ipaddress = (isset($_SERVER["REMOTE_ADDR"]))?$_SERVER["REMOTE_ADDR"]:"";
			$user->setIpAddress($ipaddress);
			$user->setMainOrderId($order_id);
			$user->setCustomerId($customer_id);
			$user->setStatus(MM_MemberStatus::$ACTIVE);
			$user->setMemberTypeId($memberType->getId());
			
			$user->setBillingAddress($bill_address1);
			$user->setBillingCity($bill_city);
			$user->setBillingState($bill_state);
			$user->setBillingZipCode($bill_zip);
			$user->setBillingCountry(MM_LimeLightUtils::getCountryCode($bill_country));
			
			$user->setShippingAddress($ship_address1);
			$user->setShippingCity($ship_city);
			$user->setShippingState($ship_state);
			$user->setShippingZipCode($ship_zip);
			$user->setShippingCountry(MM_LimeLightUtils::getCountryCode($ship_country));
			
			$response = $user->memberExists(); 
			
			if($response->type == MM_Response::$ERROR)
			{
				$errorMsgs .= $response->message.MM_Email::$BR;
				MM_LimeLightUtils::sendErrorNoticeEmail($order_id, $errorMsgs, $warningMsgs);
				
				return self::throwLimeLightError("Error processing request:<br/>".$response->message,$errorPageUrl, $fromMM);
			}
			
			$response = $user->commitData();
			
			if($response->type == MM_Response::$ERROR)
			{
				$errorMsgs .= $response->message.MM_Email::$BR;
				MM_LimeLightUtils::sendErrorNoticeEmail($order_id, $errorMsgs, $warningMsgs);
				
				return self::throwLimeLightError("Error processing request:<br/>".$response->message,$errorPageUrl, $fromMM);
			}
			
			$memberType->sendWelcomeEmail($user->getId());
		}
		
		// apply any valid access tags to user
		if(count($accessTagIds) > 0) 
		{
			for($i = 0; $i < count($accessTagIds); $i++) 
			{
				if($doCreateUser == false) {
					$result = $user->addAccessTag($accessTagIds[$i], $order_id);
				}
				else {
					$result = $user->addAccessTag($accessTagIds[$i]);
				}
				
				if(!$result) {
					$errorMsgs .= $response->message.MM_Email::$BR;
				}
			}
		}

		MM_LimeLightUtils::sendErrorNoticeEmail($order_id, $errorMsgs, $warningMsgs);
		
		if(!$fromMM) {
			return new MM_Response();
		}
		
        MM_Session::value(MM_Session::$KEY_LAST_ORDER_ID, $order_id);
        MM_Session::value(MM_Session::$KEY_LAST_USER_ID, $user->getId());
		
        $params = array();
        
        $params["isFree"] = false;
        $params["refType"] = MM_TYPE_PRODUCT;
        $params["refId"] = "0";
        
		if(count($memberTypeProductIds) > 0)
		{
			$params["refId"] = $memberTypeProductIds[0];
		}
		else if(count($accessTagProductIds) > 0)
		{	
			$params["refId"] = $accessTagProductIds[0];
		}
		
		return new MM_Response($cpe->getUrl(MM_CorePageType::$PAID_CONFIRMATION, $params));
	}
	
	public function getLimeLightSuccessPage($pageId)
	{
		global $wpdb;
		$sql = "select 
					count(*) as total 
				from 
					".MM_TABLE_CORE_PAGES." 
				where 
					page_id='{$pageId}' and core_page_type_id='".MM_CorePageType::$LIMELIGHT_SUCCESS."'";
	
		$row = $wpdb->get_row($sql);
		if(!$row){
			return false;
		}
		
		if($row->total<=0){
			return false;
		}
		
		if(!$this->arePermalinksUsed())
		{
			$url = get_option("siteurl");
			$url = preg_replace("/(\/)$/","",$url)."?p=".$pageId;
			return $url;
		}
		return get_permalink($pageId);	
	}
	
	private function getConfirmationRules($params=null)
	{
		$page_id = 0;
		LogMe::write("getConfirmationRules: ".json_encode($params));
		
		if((bool)$params["isFree"])
		{
			$page_id = $this->getCorePageIdByRefType(MM_CorePageType::$FREE_CONFIRMATION, $params["refType"], $params["refId"]);
			
			if(intval($page_id) <= 0) {
		LogMe::write("getConfirmationRules: no free: conftype: ".MM_CorePageType::$PAID_CONFIRMATION);
				$page_id = $this->getCorePageIdByRefType(MM_CorePageType::$PAID_CONFIRMATION, $params["refType"], $params["refId"]);
			}
		}
		else {
			$page_id = $this->getCorePageIdByRefType(MM_CorePageType::$PAID_CONFIRMATION, $params["refType"], $params["refId"]);
		}
		LogMe::write("getConfirmationRules: page_id: ".$page_id);
		
		if(intval($page_id) > 0)
		{
 			$orderId = MM_Session::value(MM_Session::$KEY_LAST_ORDER_ID);
 			$userId = MM_Session::value(MM_Session::$KEY_LAST_USER_ID);
 			if(intval($userId)<=0){
 				global $current_user;
 				$userId = (isset($current_user->ID))?$current_user->ID:0;
 			}
 			
 			$url= $this->getFormattedUrl($page_id);
 			$url = MM_Utils::appendUrlParam($url, MM_Session::$PARAM_ORDER_ID, $orderId, false);
 			$url = MM_Utils::appendUrlParam($url, MM_Session::$PARAM_USER_ID, $userId, false);
				
			return $url;
		}
		
		return "";
	}
	
	private function getLimeLightPage($params= null)
	{
		
	}
	
	private function getForgotPasswordPage($params=null)
	{
		$page_id = $this->getCorePageIdByRefType(MM_CorePageType::$FORGOT_PASSWORD, null, null);
		return $this->getFormattedUrl($page_id);
	}
	
	private function getMyAccountRules($params=null){
		$page_id = $this->getCorePageIdByRefType(MM_CorePageType::$MY_ACCOUNT, null, null);
		return $this->getFormattedUrl($page_id);
	}
	
	private function getLogoutPage($params=null){
//		$page_id = $this->getCorePageIdByRefType(MM_CorePageType::$LOGOUT_PAGE, null, null);
//		return $this->getFormattedUrl($page_id);

		global $wp_query,$current_user;
		$userObj = $this->getUserObject();
		
		if(is_null($userObj))
			return "";
			
		if(intval($current_user->ID)>0 || $userObj->getId()>0)
		{
			/// user is logged in, lets find there membership info
			$memberTypeId = $userObj->getMemberTypeId();
	
			///user has a member type, check for specific member type page
			$pageId = $this->getCorePageIdByRefType(MM_CorePageType::$LOGOUT_PAGE, MM_TYPE_MEMBER_TYPE, $memberTypeId);

			if(intval($pageId)>0)
			{
				$oldUrl = "";
				if(isset($wp_query->post->ID) && intval($wp_query->post->ID)>0){
					$oldUrl = $this->getFormattedUrl($wp_query->post->ID);
				}
				$newUrl = $this->getFormattedUrl($pageId);
				
				if($oldUrl == $newUrl){
					return "";
				}
				return $newUrl;
			}
		}	
		return "";
	}
	
	private function getLoginPage($params=null)
	{
		$page_id = $this->getCorePageIdByRefType(MM_CorePageType::$LOGIN_PAGE, null, null);
		return $this->getFormattedUrl($page_id);
	}
	
	private function getRegistrationPage($params=null)
	{
		$page_id = $this->getCorePageIdByRefType(MM_CorePageType::$REGISTRATION, null, null);
		return $this->getFormattedUrl($page_id);
	}
	
	private function undefinedAction()
	{
		trigger_error(__FILE__." : ".__LINE__." should be defined for corepagetype.");
	}
	
	public function getUrl($corePageTypeId, $params=null)
	{
		$method = MM_CorePageEngine::getAjaxMethod($corePageTypeId);
		if(!empty($method))
		{ 
			return call_user_func_array(array(new MM_CorePageEngine(), $method), array($params));
		}
		return "";
	}
	
	private function getFormattedUrl($page_id)
	{
		if(intval($page_id)>0)
		{
			if(!$this->arePermalinksUsed())
			{
				$thisPost = get_post($page_id);
				
				$getName = "p";
				if(isset($thisPost->post_type) && $thisPost->post_type=="page"){
					$getName = "page_id";	
				}
				
				$url = get_option("siteurl");
				$url = preg_replace("/(\/)$/","",$url)."?".$getName."=".$page_id;
				
				return $url;
			}
			else
				return get_permalink($page_id);	
		}
		return "";
	}
	
	private function arePermalinksUsed()
	{
		return get_option('permalink_structure') != '';
	}
	
	public static function getCorePageId($core_page_type, $type_name, $type_id)
	{
		$cp = new MM_CorePageEngine();
		if(!is_null($type_id))
		{
			return $cp->getCorePageIdByRefType($core_page_type, $type_name, $type_id);
		}
		return 0;
	}
	
	private function getErrorPageRules($errorTypeId)
	{
		global $user, $current_user;
		if(!is_null($errorTypeId))
		{
			$page_id = $this->getCorePageIdByRefType(MM_CorePageType::$ERROR, 'error_type', $errorTypeId);
			if(intval($page_id)>0)
			{
				return $this->getFormattedUrl($page_id);
			}
		}
		else
		{
			$page_id = $this->getCorePageIdByRefType(MM_CorePageType::$ERROR, '', '');
			if(intval($page_id)>0)
			{
				return $this->getFormattedUrl($page_id);
			}
		}
		return "";
	}
	
	private function getCancellationPage($params=null)
	{
		$user_obj = $this->getUserObject();
		
		if(is_null($user_obj))
			return "";
			 
		if(intval($user_obj->getId())>0)
		{
			/// user is logged in, lets find there membership info
			$member_type_id = $user_obj->getMemberTypeId();
			
			///user has a member type, check for specific member type page
			$page_id = $this->getCorePageIdByRefType(MM_CorePageType::$CANCELLATION, MM_TYPE_MEMBER_TYPE, $member_type_id);
			if(intval($page_id)>0)
			{
				return $this->getFormattedUrl($page_id);
			}
		}	
		return "";
	}
	
	private function getHomePageRules($params=null)
	{
		global $wp_query,$current_user;
		$userObj = $this->getUserObject();
		
		if(is_null($userObj))
			return "";
			
		if(intval($current_user->ID)>0 || $userObj->getId()>0)
		{
			/// user is logged in, lets find there membership info
			$memberTypeId = $userObj->getMemberTypeId();
	
			///user has a member type, check for specific member type page
			$pageId = $this->getCorePageIdByRefType(MM_CorePageType::$MEMBER_HOME_PAGE, MM_TYPE_MEMBER_TYPE, $memberTypeId);

			if(intval($pageId)>0)
			{
				$oldUrl = "";
				if(isset($wp_query->post->ID) && intval($wp_query->post->ID)>0){
					$oldUrl = $this->getFormattedUrl($wp_query->post->ID);
				}
				$newUrl = $this->getFormattedUrl($pageId);
				
				if($oldUrl == $newUrl){
					return "";
				}
				return $newUrl;
			}
		}	
		return "";
	}
	
	private function getUserObject()
	{
		global $user, $current_user;
		
		///see if there is a more specific page for them to go
		$user_obj = null;
		
		if(MM_Utils::isAdmin()){
			$previewObj = MM_Preview::getData();
			if($previewObj !== false){
				return $previewObj->getUser();
			}
		}
		
		if(isset($user->ID))
			$user_obj = new MM_User($user->ID);
		else if(isset($user->data->ID))
			$user_obj = new MM_User($user->data->ID);
		else if(isset($current_user->ID))
			$user_obj = new MM_User($current_user->ID);
		
		
		return $user_obj;
		
	}
	
	public function removeAllReferences($pageId)
	{
		$corePage = new MM_CorePage();
		$corePage->setPageId($pageId);
		return $corePage->setReferencePages(array());
	}
	
	public function saveSpecificPage($pageId, $corePageTypeId, $refId, $refType)
	{
		//// get default page info to determine callback method
		$row = MM_CorePage::getDefaultCorePageByType($corePageTypeId);
		if(!$row)
		{ 
			MM_Messages::addError("Unable to save Membermouse Core Page Options: Could not find default core page by Core Page Type ({$corePageTypeId}).");
			return false;
		}
			
		/// ensure ref id is an array and delete existing saved data
		$referenceIds = (is_array($refId))?$refId:array($refId);
		
		$corePage = new MM_CorePage();
		$corePage->setPageId($pageId);
		$corePage->setRefType($refType);
		$corePage->setCorePageTypeId($corePageTypeId);
		return $corePage->setReferencePages($referenceIds);
	}
	
	public function hasReferences($pageId)
	{
		global $wpdb;
		$sql = "select count(*) as total from ".MM_TABLE_CORE_PAGES ." where page_id='{$pageId}' and ref_id>0 and ref_type IS NOT NULL";
		
		$row = $wpdb->get_row($sql);
		return $row->total>0;
	}
	
	public function saveDefaultPage($pageId, $corePageTypeId, $override=false)
	{
		global $wpdb;
		
		if(!$override)
		{	
			if(MM_CorePage::hasDefaultCorePage($corePageTypeId, $pageId))
			{
				MM_Messages::addError("Core page could not be saved since one is already defined."); 
				return false;
			}
		}
		$corePage = new MM_CorePage();
		$corePage->setCorePageTypeId($corePageTypeId);
		$corePage->setPageId($pageId);
		return $corePage->setAsDefaultPage();
	}
	
	public static function isCorePage($pageId, $corePageTypeId=0){
		global $wpdb;
		
		$sql = "select count(*) as total from ".MM_TABLE_CORE_PAGES." where page_id='{$pageId}' ";
		if($corePageTypeId>0){
			$sql.= " and core_page_type_id='{$corePageTypeId}'";
		}
		$row = $wpdb->get_row($sql);
		
		return ($row->total>0);
	}
	
	public static function getRequiredTags($corePageTypeId)
	{
		global $wpdb;
		$sql = "select st.name, r.is_global from ".MM_TABLE_CORE_PAGE_TAG_REQUIREMENTS." r, ".MM_TABLE_SMARTTAGS." st 
					where 
						r.core_page_type_id='{$corePageTypeId}' and 
						r.smarttag_id=st.id
						
						";
		$rows = $wpdb->get_results($sql);
		if(!$rows)
		{
			return array();
		}
		return $rows;
	}
	
	public function getCorePageIdByRefType($corePageTypeId, $refType, $refId)
	{
		global $wpdb;
		LogMe::write("getCorePageIdByRefType() : ".$corePageTypeId." : ".$refType." : ".$refId);	
		
		$rows = MM_CorePage::getAllReferencesToCorePageType($corePageTypeId);
		if($rows == 0)
			return $rows;
		
		LogMe::write("getCorePageIdByRefType() : ".json_encode($rows));	
			
		$default_page = 0;
		foreach($rows as $row)
		{
			if($row->ref_type == $refType && $row->ref_id==$refId)
				return $row->page_id;
			else if(is_null($row->ref_type) || empty($row->ref_type))
				$default_page = $row->page_id;
		}
		
		LogMe::write("getCorePageIdByRefType() : ".json_encode($default_page));
		return $default_page;
	}
	
	public function removeCorePageById($pageId)
	{
		global $wpdb;
		
		///update core page to nothing.
		$cp = new MM_CorePage();
		$cp->setPageId($pageId);
		$cp->removeCorePage();
	}
}
