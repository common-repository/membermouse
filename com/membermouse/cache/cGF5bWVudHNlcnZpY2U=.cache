/**
 * 
 * 
MemberMouse(TM) (http://www.membermouse.com)
(c) 2010-2011 Pop Fizz Studios, LLC. All rights reserved.
 */
abstract class MM_PaymentService{
	public static $REBILL_STATUS_START = "start";
	public static $REBILL_STATUS_STOP = "stop";
	public static $REBILL_STATUS_RESET = "reset";
	public function __construct(){
		
	}
	
	protected static function getRequest($baseUrl, $params){
		LogMe::write("getRequestUrl(): URL: ".$baseUrl." : ".json_encode($params));
		$params["url"] = $baseUrl;
		return new MM_Response($params);
	}

	public function cancel($userId){
		$user = new MM_User($userId);
		if($user->isValid()){
			$cancelChecked = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_EVENT_HANDLING_CANCEL);
			if($cancelChecked==MM_EventHandlingStatus::$CANCEL_HARD){
				$user->setStatus(MM_MemberStatus::$CANCELED);	
			}
			else{
				$user->setStatus(MM_MemberStatus::$PAUSED);	
			}
		}
	}
	
	public function getReturnUrl(MM_Product $product, MM_MemberType $memberType){
	
        $params = array();
        $params["isFree"] = 0;
        $params["refType"] =MM_TYPE_PRODUCT;
        $params["refId"] = $product->getId();
        
		$cpe = new MM_CorePageEngine();
		$confirmationPage = $cpe->getUrl(MM_CorePageType::$PAID_CONFIRMATION, $params);
		
		$hasAssociations = MM_Product::hasAssociations($product->getId());
		if($hasAssociations){
			$hasAssociationsAT = false;
			$at = $product->getAssociatedAccessTag();
			if(isset($at->id) && $at->id>0){
				$hasAssociationsAT = true;
			}
		}
        
 		if(!$hasAssociations){
	        $params["isFree"] = 0;
	        $params["refType"] =MM_TYPE_PRODUCT;
	        $params["refId"] = $product->getId();
	        
			$confirmationPage = $cpe->getUrl(MM_CorePageType::$PAID_CONFIRMATION, $params);
			
			if(strlen($confirmationPage)>0)
			{
				MM_Session::clear(MM_Session::$KEY_REGISTRATION);
			}
 		}
 		else if($hasAssociationsAT){
 
			$at = $product->getAssociatedAccessTag();
			$accessTag = new MM_AccessTag($at->id);
			
	        $params["isFree"] = $accessTag->isFree();
	        $params["refType"] =MM_TYPE_PRODUCT;
	        $params["refId"] = $product->getId();
	        if($accessTag->isFree()){
		        $params["refType"] =MM_TYPE_ACCESS_TAG;
		        $params["refId"] = $accessTag->getId();
	        }
			$confirmationPage = $cpe->getUrl(MM_CorePageType::$PAID_CONFIRMATION, $params);
			
			if(strlen($confirmationPage)>0)
			{
				MM_Session::clear(MM_Session::$KEY_REGISTRATION);
			}
 		}
 		else{
	        $params["isFree"] = $memberType->isFree();
	        $refType = MM_TYPE_PRODUCT;
	        $typeId = $memberType->getRegistrationProduct();
	        if((bool)$params["isFree"]){
	        	$refType = 	MM_TYPE_MEMBER_TYPE;
	        	$typeId= $memberType->getId();
	        }
	        $params["refType"] =$refType;
	        $params["refId"] = $typeId;
	        
			$confirmationPage = $cpe->getUrl(MM_CorePageType::$PAID_CONFIRMATION, $params);
			
			if(strlen($confirmationPage)>0)
			{
				MM_Session::clear(MM_Session::$KEY_REGISTRATION);
			}
			
 		}
 		return $confirmationPage;
	}
	
	protected static function sendRequest($url, $params){
		LogMe::write("MM_PaymentService.sendRequest(): URL: ".$url." : ".json_encode($params));
		
		$postvars = "";
		if(is_array($params)){
			foreach($params as $key=>$val){
				$postvars.=$key."=".$val."&";
			}
		}
		
		$ch = curl_init($url);
		curl_setopt($ch, CURLOPT_POST      ,1);
		curl_setopt($ch, CURLOPT_POSTFIELDS    , $postvars);
		curl_setopt($ch, CURLOPT_HEADER      ,0);  // DO NOT RETURN HTTP HEADERS
		curl_setopt($ch, CURLOPT_RETURNTRANSFER  ,1);  // RETURN THE CONTENTS OF THE CALL
		curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1); // Redirect to page where its 
		curl_setopt ($ch, CURLOPT_USERAGENT, $_SERVER['HTTP_USER_AGENT']);
		$contents = curl_exec($ch);
		curl_close($ch);	
		
		LogMe::write("MM_PaymentService.sendRequest : ".$contents);
		
		return $contents;
	}
	
	protected function addRetentionRecord($orderId,$userId,$productId, $refId, $refType, $paymentId){
		
		$affiliateId = MM_RetentionReport::getAffiliateCookie(MM_OPTION_TERMS_AFFILIATE);
		$subAffiliateId = MM_RetentionReport::getAffiliateCookie(MM_OPTION_TERMS_SUB_AFFILIATE);
		
		LogMe::write("addRetentionRecord($orderId,$userId,$productId, $refId, $refType, $paymentId) : ".$affiliateId." : ".$subAffiliateId);
		
		$retentionReport = new MM_RetentionReport();
		$retentionReport->setAffiliateId($affiliateId);
		$retentionReport->setSubAffiliateId($subAffiliateId);
		$retentionReport->setOrderId($orderId);
		$retentionReport->setUserId($userId);
		$retentionReport->setProductId($productId);
		$retentionReport->setRefId($refId);
		$retentionReport->setRefType($refType);
		$retentionReport->setPaymentMethodId($paymentId);
		$retentionReport->commitData();
	}
	
	protected function updateMemberProducts($userId, $productId){
		
		
		$column = "product_id";
		if($this instanceof MM_PaypalService || $this instanceof MM_ClickBankService){
		
			$column = "id";
		}
		
		$product = new MM_Product();
		$product->getDataByProductId($productId,$column);
		
		$accessTagId = 0;
		$customer = new MM_User($userId);
		$customer->doUpdateLL =false;
		
		if(!$customer->isValid()){
		
			return new MM_Response("Could not attribute product to customer",MM_Response::$ERROR);
		}
		
		$row = $product->getAssociatedMemberType();
		LogMe::write("PaymentService::updateMemberProducts : ".json_encode($row));
		
		$isMemberType = false;
		if($product->isValid()){ 
			
			if(isset($row->id) && $row->id>0){
				$isMemberType = true;
				LogMe::write("PaymentService::updateMemberProducts : MTID :  ".$row->id);
				$customer->setMemberTypeId($row->id);
			}
		}
		
		if(!$isMemberType){
			$row = $product->getAssociatedAccessTag();
		LogMe::write("PaymentService::updateMemberProducts AT [".$product->getId()." vs. {$productId}]: ".json_encode($row));
	
			if(isset($row->id) && $row->id>0){
				LogMe::write("PaymentService::updateMemberProducts : addAccessTag [{$productId}]:  ".$row->id);
				$customer->addAccessTag($row->id, 0, $productId);
			}
		}
		
		LogMe::write("PaymentService::updateMemberProducts : Customer MEMBER TYPE ID ".$customer->getMemberTypeId());
		$response = $customer->commitData();
		
		LogMe::write("PaymentService::updateMemberProducts : ".$response->message);
		return $response;
	}
	
	protected function createMember($customerFields){
		$product = new MM_Product();
		$column = "product_id";
		if($this instanceof MM_PaypalService){
			$column = "id";
		}
		$product->getDataByProductId($customerFields->product_id,$column);
		$accessTagId = 0;
		$customer = new MM_User();
		
		$row = $product->getAssociatedMemberType();
		if($product->isValid() && isset($row->id) && $row->id>0){
			$customer->setMemberTypeId($row->id);
		}
		else{
			$memberType = new MM_MemberType();
			$memberType->getDefault();
			$customer->setMemberTypeId($memberType->getId());
			
			$row = $product->getAssociatedAccessTag();
			if(isset($row->id) && $row->id>0){
				$accessTagId = $row->id;
			}
		}
		$customer->setUsername($customerFields->email);
	 	
	 	$password =  MM_Utils::createRandomString(7);
	 	$customer->setPassword($password);
	 	
	 	LogMe::write("paymentservice:: email: ".$customerFields->email);
	 	
	 	$customer->setEmail($customerFields->email);
	 	$customer->setFirstName($customerFields->first_name);
	 	$customer->setLastName($customerFields->last_name);
	 	
		$customer->setStatus(MM_MemberStatus::$PAUSED);
	 	
	 	if(isset($customerFields->billing_country)){
		 	$customer->setBillingAddress($customerFields->billing_address);
		 	$customer->setBillingCity($customerFields->billing_city);
		 	$customer->setBillingState(strtoupper($customerFields->billing_state));
		 	$customer->setBillingZipCode($customerFields->billing_zip);
		 	$customer->setBillingCountry($customerFields->billing_country);
	 	}
	 	if(isset($customerFields->shipping_country)){
		 	$customer->setShippingAddress($customerFields->shipping_address);
		 	$customer->setShippingCity($customerFields->shipping_city);
		 	$customer->setShippingState(strtoupper($customerFields->shipping_state));
		 	$customer->setShippingZipCode($customerFields->shipping_zip);
		 	$customer->setShippingCountry($customerFields->shipping_country);
	 	}
		$customer->setIpAddress(MM_Utils::getClientIPAddress());
		
		$memberExists = $customer->memberExists();
		if($memberExists->type == MM_Response::$SUCCESS){
			$ret = $customer->commitData();	
			if($ret->type == MM_Response::$SUCCESS){
				MM_Session::value(MM_Session::$KEY_LAST_USER_ID,$customer->getId());
				
				$accessType =  MM_TYPE_MEMBER_TYPE;
				$typeId = $customer->getMemberTypeId();
				if($accessTagId>0){
					$customer->addAccessTag($accessTagId);
					$accessType =  MM_TYPE_ACCESS_TAG;
				}
				
			//	$this->addRetentionRecord($customerFields->order_id,$customer->getId(),$product->getId(), $typeId, $accessType, $customerFields->payment_id);

				$memberType = new MM_MemberType($customer->getMemberTypeId());
				$memberType->sendWelcomeEmail($customer->getId());
				return $customer;
			}
		}
		LogMe::write("PaymentService::createMember() : ".__LINE__);
		return false;
	}

 	public static function getAccessTagPaymentMethodId(MM_User $user, MM_AccessTag $tag){
 		$responses = MM_CallbackResponse::getDataByUser($user->getId());
 		
 		foreach($responses as $response){
 			$productId = $response->getProductId();
 			$product = new MM_Product($productId);
 			$accessTag = $product->getAssociatedAccessTag();
 			if(isset($accessTag->id) && intval($accessTag->id)>0 && $tag->getId() == $accessTag->id){
 				return $response->getPaymentId();
 			}
 		}
 		return self::getDefaultPaymentMethodId();
 	}

 	public static function getMembershipPaymentMethodId(MM_User $user){
 		$responses = MM_CallbackResponse::getDataByUser($user->getId());
 		
 		foreach($responses as $response){
 			$productId = $response->getProductId();
 			$product = new MM_Product($productId);
 			$memberType = $product->getAssociatedMemberType();
 			if(isset($memberType->id) && intval($memberType->id)>0){
 				return $response->getPaymentId();
 			}
 		}
 		return self::getDefaultPaymentMethodId();
 	}
 	
 	public static function getDefaultPaymentMethodId($option = null){
		$paymentId = 0;
		
		switch($option){
			case "paypal":
				$obj = MM_Utils::getPaymentMethodObj(new MM_PaypalService());
				if($obj===false){
					return new MM_Response("Could not find an active payment method, please notify the system administrator");	
				}
				return $obj->id;
			case "clickbank":
				$obj = MM_Utils::getPaymentMethodObj(new MM_ClickBankService());
				if($obj===false){
					return new MM_Response("Could not find an active payment method, please notify the system administrator");	
				}
				return $obj->id;
			default:
				if(MM_Site::$INSTALL_TYPE_LIMELIGHT == MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_INSTALL_TYPE)){
					return $paymentId;
				}
		}
					
		if(MM_Site::$INSTALL_TYPE_LIMELIGHT != MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_INSTALL_TYPE)){
			$obj = MM_Utils::getPaymentMethodObj(new MM_PaypalService());
			
			if($obj===false){
				$obj = MM_Utils::getPaymentMethodObj(new MM_ClickBankService());
				if($obj===false){
					return new MM_Response("Could not find an active payment method, please notify the system administrator");	
				}
				else{
					return $obj->id;
				}
			}
			else{
				return $obj->id;	
			}
		}
		else{
			return $paymentId;
		}
		return new MM_Response("Could not find an active payment method, please notify the system administrator");
 	}
 	
	
	protected abstract function saveMember($post);
	public abstract function viewOrder($id);
	public abstract function refundOrder($id, $refundAmount);
	public abstract function fastForwardMembership(MM_Product $product, $price, $days=0);
	public abstract function changeMembership(MM_User $user, MM_MemberType $crntMemberType, MM_MemberType $newMemberType);
	public abstract function updateOrderRecurring($orderId, $status, $userId=0);
	public abstract function handleCallback($request);
	public abstract function purchaseProduct(MM_User $user, $productId, $initializeNewSubscription=false, $paymentOptionId=0, $shippingOptionId=0, $isFastForward=false);
	public abstract function placeOrder(MM_Order $order);
	public abstract function placeOrderCardOnFile($previousOrderId, $campaignId, $productId, $shippingId, $userId, $priceOverride="", $initializeNewSubscription=false, $additionalParams=null);
}