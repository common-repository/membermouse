class MM_PhpObj extends MM_Sync{
	
	public function importFile($filePath,$shouldBase64=false){
		if(!file_exists($filePath)){
			$this->showDebug("Could not find file");
			return false;
		}
		
		$contents = file_get_contents($filePath);
	
		if($shouldBase64){
			$contents = base64_decode($contents);
		}
		
		$obj = unserialize($contents);
		if($obj===false){
			$this->showDebug("Could not unserialize file");
			return false;
		}
		
		$queries = array();
		$lastColumn = "";
		foreach($obj as $table=>$columns){
			if($this->tableExists($table)){
				foreach($columns as $column){
					if($this->isValidColumnObject($column)){
						if(!$this->fieldExists($column->Field, $table)){
							$lastColumnSql = (!empty($lastColumn))?" AFTER {$lastColumn}":"";
							$queries[] = $this->alterTableSql($table, $column, $lastColumnSql);
						}
						$lastColumn = $column->Field;	
					}
				}
			}
			else{
				$queries[] = $this->createTableSql($table, $columns);
			}
		}	
		
		foreach($queries as $query){
			if($this->db->query($query)===false){
				$this->showDebug("Could not execute query {$query} ".mysql_error());
				return false;
			}
		}
		return true;
	}
	
	public function importScreen($filePath){
		if(!file_exists($filePath)){
			$this->showDebug("Could not find file");
			return false;
		}
		
		$contents = file_get_contents($filePath);
		$obj = unserialize($contents);
		if($obj===false){
			$this->showDebug("Could not unserialize file");
			return false;
		}
		
		$queries = array();
		$lastColumn = "";
		foreach($obj as $table=>$columns){
			if($this->tableExists($table)){
				foreach($columns as $column){
					if($this->isValidColumnObject($column)){
						if(!$this->fieldExists($column->Field, $table)){
							$lastColumnSql = (!empty($lastColumn))?" AFTER {$lastColumn}":"";
							$queries[] = $this->alterTableSql($table, $column, $lastColumnSql);
						}
						$lastColumn = $column->Field;	
					}
				}
			}
			else{
				$queries[] = $this->createTableSql($table, $columns);
			}
		}	
		
		echo "<pre>";
		echo var_dump($queries);
		echo "</pre>";
	}
	
	public function exportFile($dir, $newFileName=""){
		if($this->isSafe($dir)){
			$this->getTables();
		}
		$contents = $this->getTables();
		
		$fileName = (empty($newFileName))?"membermouse_schema.sql":$newFileName;
		$filePath = $dir."/".$fileName."";
		$fh = fopen($filePath, 'w');
		if(!$fh){
			return false;
		}
		
		fwrite($fh, serialize($contents));
		fclose($fh);
		
		return true;
	}
	
	public function exportScreen(){
		if(!$this->validateDbRef()){
			$this->showDebug("DB Adapter does not have the proper functions");
			return false;	
		}
		
		$contents = $this->getTables();
		
		echo "<pre>";
		echo var_dump($contents);
		echo "</pre>";
	}
}