/**
 * 
 * 
MemberMouse(TM) (http://www.membermouse.com)
(c) 2010-2011 Pop Fizz Studios, LLC. All rights reserved.
 */
class MM_PayPalService extends MM_PaymentService{
	public static $PAYMENT_STATUS_CANCELED_REVERSAL = "Canceled_Reversal";
	public static $PAYMENT_STATUS_COMPLETED = "Completed";
	public static $PAYMENT_STATUS_DENIED = "Denied";
	public static $PAYMENT_STATUS_EXPIRED = "Expired";
	public static $PAYMENT_STATUS_FAILED = "Failed";
	public static $PAYMENT_STATUS_IN_PROGRESS = "In-Progress";
	public static $PAYMENT_STATUS_PARTIALLY_REFUNDED = "Partially_Refunded";
	public static $PAYMENT_STATUS_PENDING = "Pending";
	public static $PAYMENT_STATUS_PROCESSED = "Processed";
	public static $PAYMENT_STATUS_REFUNDED = "Refunded";
	public static $PAYMENT_STATUS_REVERSED = "Reversed";
	public static $PAYMENT_STATUS_VOIDED = "Voided";
	 
	public function __construct(){
			
	}
	
	public function fastForwardMembership(MM_Product $product, $price, $days=0){
		global $current_user;
		
		$user = new MM_User($current_user->ID);
		$paymentId = MM_PaymentService::getDefaultPaymentMethodId("paypal");
		$product->setPrice($price);
		$product->setName("Fast Forward Membership");
		$product->setDescription($days);
		return $this->purchaseProduct($user, $product,false,$paymentId, 0, true);
	}
	
	public function refundOrder($id, $refundAmount){
		return new MM_Response("Could not find order with PayPal", MM_Response::$ERROR);	
	}
	
	public function viewOrder($id){
		//order_status, amount_refunded_to_date, 
		$oh = new MM_OrderHistory($id);
		
		$out = array(
			'order_status'=>MM_Order::$STATUS_APPROVED,
			'amount_refunded_to_date'=>0,
			'is_chargeback'=>'0',
		);
		
		
		return $out;	
	}
	
	protected function saveMember($post){
		/*
		 * {\"test_ipn\":\"1\",\"payment_type\":\"instant\",\"payment_date\":\"18:59:26 Mar 18, 2011 PDT\",\"payment_status\":\"Completed\",
		 * \"payer_status\":\"verified\",\"first_name\":\"John\",\"last_name\":\"Smith\",\"payer_email\":\"buyer@paypalsandbox.com\",
		 * \"payer_id\":\"TESTBUYERID01\",\"business\":\"seller@paypalsandbox.com\",\"receiver_email\":\"seller@paypalsandbox.com\",
		 * \"receiver_id\":\"TESTSELLERID1\",\"residence_country\":\"US\",\"item_name1\":\"something\",
		 * \"item_number1\":\"AK-1234\",\"quantity1\":\"1\",\"tax\":\"2.02\",\"mc_currency\":\"USD\",\"mc_fee\":\"0.44\",\"mc_gross\":\"15.34\",
		 * \"mc_gross_1\":\"12.34\",\"mc_handling\":\"2.06\",\"mc_handling1\":\"1.67\",\"mc_shipping\":\"3.02\",\"mc_shipping1\":\"1.02\",
		 * \"txn_type\":\"cart\",\"txn_id\":\"26319159\",\"notify_version\":\"2.4\",\"custom\":\"xyz123\",\"invoice\":\"abc1234\",
		 * \"charset\":\"windows-1252\",\"verify_sign\":\"Aw5tsC6CETiWRJCDM-ptqckacgjaAIeCErpmDUBmayUgaWDttqEsJoWN\"}"
		 */
		
		$customerFields = new stdClass();
		$customerFields->email = $post["payer_email"];
		$customerFields->product_id = $post["item_number1"];
		$customerFields->first_name = $post["first_name"];
		$customerFields->last_name = $post["last_name"];
		$customerFields->billing_country = "";
		$customerFields->billing_address = "";
		$customerFields->billing_city = "";
		$customerFields->billing_state = "";
		$customerFields->billing_zip = "";
		$customerFields->shipping_country = $post["residence_country"];
		$customerFields->shipping_address = "";
		$customerFields->shipping_city = "";
		$customerFields->shipping_state = "";
		$customerFields->shipping_zip = "";
		$customerFields->payment_id = "";
		$customerFields->order_id = $post["invoice"];
		$customerFields->payment_id = $this->getPaymentId($post["business"]);
		LogMe::write("calling createMember() : ".json_encode($customerFields));
		return $this->createMember($customerFields);
	}
	
	private function getPaymentId($email){
	
		$options = MM_CampaignOptions::getOptions("payment");
		foreach($options as $id=>$val){
			$obj = new MM_CampaignOptions($id);
			if($obj->isValid()){
				$attr = $obj->getAttr();
				$json = json_decode($attr);
				if(isset($json->email)){
					if($json->email == $email){
						return $obj->getId();
					}
				}
			}
		}
		return 0;
	}
	
	public function handleCallback($request){
			LogMe::write("PayPalService::handleCallback  ".json_encode($request));
			
		$itemKey = "item_number1";
		if(!isset($request["item_number1"])){
			$itemKey = "item_number";
		}
			
		if(!isset($request["custom"])){
			$request["custom"] = "";
		}
		
		$newMember = false;
		$user = new MM_User();
		$user->setEmail($request["payer_email"]);
		$user->getDataByEmail();
		
		if(!$user->isValid()){
			
			$user = $this->saveMember($request);
			
			if($user===false){
				return $user;
			}
			
			$newMember = true;
		}
		else{
			
		
			if(preg_match("/(ff)$/", strtolower($request[$itemKey]))){
				if(isset($request["payment_status"]) && MM_PaypalService::$PAYMENT_STATUS_COMPLETED == $request["payment_status"]){
					$memberShipView = new MM_MembershipView();
					$post = array(
						'days'=>intval($request["custom"]),
						'price'=>1,
						'user_id'=>$user->getId(),
					);
					$memberShipView->fastForwardMembership($post, true);
				}
			}
			
			$response = $this->updateMemberProducts($user->getId(), $request[$itemKey]);
			if($response->type == MM_Response::$ERROR){
				LogMe::write("PayPalService::HandleResponse ERROR ".__LINE__." : ".$response->message);
				return $response;
			}
			$user = new MM_User($user->getId());
			LogMe::write("PayPalService::HandleResponse  ".__LINE__." : json : ".json_encode($response));
		}
		
		$callbackResponse = new MM_CallbackResponse();
		$callbackResponse->setResponse($request);
		$callbackResponse->setUserId($user->getId());
		
		MM_Session::value(MM_Session::$KEY_LAST_USER_ID,$user->getId());
		 
		$paymentObj = MM_Utils::getPaymentMethodObj($this);
		$paymentId = (isset($paymentObj->id))?$paymentObj->id:0;
		$callbackResponse->setPaymentId($paymentId);
		$callbackResponse->setProductId($request[$itemKey]);
		$callbackResponse->setPaymentMethod(get_class($this));
		$user->doUpdateLL = false;
		$shouldRefund = "0";
		if(isset($request["payment_status"])){
			$callbackResponse->setPaymentStatus($request["payment_status"]);
			$requestObj = MM_Utils::convertArrayToObject($request);
			$product = new MM_Product($request[$itemKey]);
			switch($request["payment_status"]){
				case MM_PaypalService::$PAYMENT_STATUS_REFUNDED:
					if($product->isAssociatedWithMemberType()){
						$user->setIsRefunded("1");
						$shouldRefund = "1";
					}
					else if($product->isAssociatedWithAccessTag()){
						$row= $product->getAssociatedAccessTag();
						if(isset($row->id)){
							$applied = new MM_AppliedAccessTag();
							$applied->setAccessTagId($row->id);
							$applied->setRefId($user->getId());
							$applied->getDataByTagAndUser();
							$applied->setStatus("0");
							$applied->commitData();	
						}
					}
				case MM_PaypalService::$PAYMENT_STATUS_PARTIALLY_REFUNDED:
				case MM_PaypalService::$PAYMENT_STATUS_VOIDED:
				case MM_PaypalService::$PAYMENT_STATUS_REVERSED:
				case MM_PaypalService::$PAYMENT_STATUS_CANCELED_REVERSAL:
			LogMe::write("PayPalService::HandleResponse  ".__LINE__." : json : ".json_encode($request));
					if($product->isAssociatedWithMemberType()){
						$row = $product->getAssociatedMemberType();
						if(isset($row->id)){
							if($user->getMemberTypeId() == $row->id){
								$this->cancel($user->getId());
							}
						}
					}
					else if($product->isAssociatedWithAccessTag()){
						$row= $product->getAssociatedAccessTag();
						if(isset($row->id)){
							$applied = new MM_AppliedAccessTag();
							$applied->setAccessTagId($row->id);
							$applied->setRefId($user->getId());
							$applied->getDataByTagAndUser();
							$applied->setStatus("0");
							$applied->setIsRefunded($shouldRefund);
							$applied->commitData();	
						}
					}
					
					break;
				case MM_PaypalService::$PAYMENT_STATUS_COMPLETED:
//					if($newMember){
//						$this->addRetentionRecord($request["invoice"],$user->getId(),$request[$itemKey], $user->getMemberTypeId(), MM_TYPE_MEMBER_TYPE, $this->getPaymentId($request["business"]));
//					}

					$accessType = MM_TYPE_PRODUCT;
					$typeId = $product->getId();
					if($product->isAssociatedWithMemberType()){
						$user->setStatus(MM_MemberStatus::$ACTIVE);
						$accessType =  MM_TYPE_MEMBER_TYPE;
						$typeId = $user->getMemberTypeId();
					}
					else if($product->isAssociatedWithAccessTag()){
						$at = $product->getAssociatedAccessTag();
						if(intval($at->id)>0){
							$typeId = $at->id;
							$accessType =  MM_TYPE_ACCESS_TAG;
						}
					}
					
					if(!$newMember){
						$this->addRetentionRecord($request["invoice"],$user->getId(),$request[$itemKey], $typeId, $accessType, $paymentId);
					}
					break;
				case MM_PaypalService::$PAYMENT_STATUS_FAILED:
				case MM_PaypalService::$PAYMENT_STATUS_EXPIRED:
				case MM_PaypalService::$PAYMENT_STATUS_DENIED:
					
					if($product->isAssociatedWithMemberType()){
						$user->setStatus(MM_MemberStatus::$OVERDUE);
					}
					else if($product->isAssociatedWithAccessTag()){
						$row= $product->getAssociatedAccessTag();
						if(isset($row->id)){
							$applied = new MM_AppliedAccessTag();
							$applied->setAccessTagId($row->id);
							$applied->setRefId($user->getId());
							$applied->getDataByTagAndUser();
							$applied->setStatus("0");
							$applied->commitData();		
						}
					}
					break;
					
				case MM_PaypalService::$PAYMENT_STATUS_IN_PROGRESS:
				case MM_PaypalService::$PAYMENT_STATUS_PENDING:
				case MM_PaypalService::$PAYMENT_STATUS_PROCESSED:
					
					if($product->isAssociatedWithMemberType()){
						$user->setStatus(MM_MemberStatus::$LOCKED);
					}
					else if($product->isAssociatedWithAccessTag()){
						$row= $product->getAssociatedAccessTag();
						if(isset($row->id)){
							$applied = new MM_AppliedAccessTag();
							$applied->setAccessTagId($row->id);
							$applied->setRefId($user->getId());
							$applied->getDataByTagAndUser();
							$applied->setStatus("0");
							$applied->commitData();	
						}
					}
					
					break;
			}
			LogMe::write("paypalservice::handleCallback [1] Status : ". $user->getStatus());
			$ret = $user->commitData();
			if($ret->type == MM_Response::$SUCCESS){
				LogMe::write("paypalservice::handleCallback [2] User update success");
			}
			else{
				LogMe::write("paypalservice::handleCallback [3] User update fail! : ".$ret->message);
			}
		}
		$callbackResponse->commitData();
	}

	public function changeMembership(MM_User $user, MM_MemberType $crntMemberType, MM_MemberType $newMemberType){
		global $current_user;
		
		if(MM_Utils::isAdmin($current_user->ID)){
			return $user;
		}
		/*
		 * TODO
		 * Wrong email here.. needs to be the sites paypal email
		 */
		$paymentId = 0;
		$paymentMethodId = MM_PaymentService::getDefaultPaymentMethodId('paypal');
		if(!($paymentMethodId instanceof MM_Response) ){
			$paymentId = $paymentMethodId;
		}
		
		$ret = $this->purchaseProduct($user, $newMemberType->getId(),false,$paymentId,0,false);
		LogMe::write("PayPalService::changeMembership ".json_encode($ret));
		return $ret;
		/*
		$email = "";
		$paymentMethodId = MM_PaymentService::getDefaultPaymentMethodId('paypal');
		if(!($paymentMethodId instanceof MM_Response) ){
			$opt = new MM_CampaignOptions($paymentMethodId);
			if($opt->isValid()){
				$json = json_decode($opt->getAttr());
				if(!is_null($json) && isset($json->email)){
					$email = $json->email;
				}
			}	
		}
		
		$url = "https://www.paypal.com/cgi-bin/webscr?cmd=_subscr-find&alias=".urlencode($email);
		return new MM_Response($url);*/
	}
	
	private function getPayPalEmail(){
		$email = "";
		$paymentMethodId = MM_PaymentService::getDefaultPaymentMethodId('paypal');
		if(!($paymentMethodId instanceof MM_Response) ){
			$opt = new MM_CampaignOptions($paymentMethodId);
			if($opt->isValid()){
				$json = json_decode($opt->getAttr());
				if(!is_null($json) && isset($json->email)){
					$email = $json->email;
				}
			}	
		}
		return $email;
	}
	
	public function updateOrderRecurring($orderId, $status, $userId=0){
		global $current_user;
		
		if(MM_Utils::isAdmin($current_user->ID)){
			return new MM_Response("http://www.paypal.com");
		}
		
		switch($status){
			case MM_PaypalService::$REBILL_STATUS_START:
					return new MM_Response("Cannot redirect to URL", MM_Response::$ERROR);
				break;
			case MM_PaypalService::$REBILL_STATUS_RESET:
					return new MM_Response("Cannot redirect to URL", MM_Response::$ERROR);
			default:
				$user = new MM_User($userId);
				if($user->isValid()){
					$memberTypeId = $user->getMemberTypeId();
					$memberType = new MM_MemberType($memberTypeId);
					$product =  new MM_Product($memberType->getRegistrationProduct());
					if($product->isRecurring(false)){
						$url = "https://www.paypal.com/cgi-bin/webscr?cmd=_subscr-find&alias=".urlencode($this->getPayPalEmail());
						return new MM_Response($url);
					}
				}
				break;
		}	
		return new MM_Response("Could not find valid member type to set status to {$status}", MM_Response::$ERROR);
	}
	
	public function placeOrder(MM_Order $order){
		if(!($order instanceof MM_Order)){
			return new MM_Response("Order object not valid", MM_Response::$ERROR);
		}
		$url   =   "https://www.paypal.com/cg-bin/webscr";
		
		$memberTypeId = $order->getCustomer()->getMemberTypeId();
		$memberType = new MM_MemberType($memberTypeId);
		$product = new MM_Product($memberType->getRegistrationProduct());
		
		$campaignOptions = new MM_CampaignOptions($order->getPaymentOption());
		$jsonStr = $campaignOptions->getAttr();
		$obj  = json_decode($jsonStr);
		if(!isset($obj->email)){
			return new MM_Response("No account email associated with this payment method ", MM_Response::$ERROR);
		}
		
		$productShippingCost = 0;
		$shippingMethod = $order->getShippingMethod();
		
		$confirmationPage = $this->getReturnUrl($product, $memberType);
		$shippingCost = 0;
		if($product->isShippable()){
			$shippingId = $order->getShippingMethod();
			$option = new MM_CampaignOptions($shippingId);
			$shippingCost = $option->getAttr();	
		}
	
		$params = array(
			'business'=>$obj->email,
			'notify_url'=>MM_MODULES_URL."/ipn/paypal.php",
			'currency_code'=>'USD',
			'item_name'=>$memberType->getName(),
			'item_number'=>$product->getId(),
			'quantity'=>1,
			'return'=>$confirmationPage,
			'rm'=>'1',
			'cbt'=>'Return to '.get_option("blogname"),
			'cancel_return'=>get_option("siteurl"),
			'custom'=>$order->getCustomer()->getId(),
			'amount'=>$product->getPrice(),
			'shipping'=>$shippingCost,
		);
		
		LogMe::write("PayPalService::placeOrder() : params [LINE ".__LINE__."] : ".json_encode($params));
		
		if($product->isRecurring(false)){
			$params["src"] = 1;
//			$params["srt"] = 999;
			$params['modify']=1;
		//	$params['usr_manage']=1;
			$params['a3']=$product->getPrice();
			$params['p3']=$product->getRebillPeriod();
			$params['t3']=self::getFrequencyType($product->getRebillFrequency()); //D - days, W-weeks, M-months,Y-years 
		}
		
		$cmd = "_xclick-subscriptions";
		if(!$product->isRecurring(false)){
			$cmd = "_xclick";
		}
		$params["cmd"] = $cmd;
		
		LogMe::write("PaypalService : params : ".json_encode($params));
		if($product->getTrialFrequency()!="" && $product->getTrialDuration()>0){
			$params["a1"] = $product->getTrialAmount();
			$params["p1"] = self::getFrequencyType($product->getTrialFrequency());
			$params["t1"] = $product->getTrialDuration();
		}
		return self::getRequest($url, $params);
	}
	
	private static function getFrequencyType($freq){
		switch($freq){
			case "days":
				return "D";
			case "weeks":
				return "W";
			case "years":
				return "Y";
		}
		return "M";
	}
	
	
	public function purchaseProduct(MM_User $user, $productId, $initializeNewSubscription=false, $paymentOptionId=0, $shippingOptionId=0, $isFastForward=false){
		global $current_user;
		
		if(MM_Utils::isAdmin($current_user->ID)){
			return false;
		}
		
		$url   =   "https://www.paypal.com/cg-bin/webscr";
		
		$product = new MM_Product();
		if($productId instanceof MM_Product){
			$product = $productId;
		}
		else{
			$product = new MM_Product($productId);
		}
		
		$campaignOptions = new MM_CampaignOptions($paymentOptionId);
		$jsonStr = $campaignOptions->getAttr();
		$obj  = json_decode($jsonStr);
		if(!isset($obj->email)){
			return new MM_Response("No account email associated with this payment method ", MM_Response::$ERROR);
		}
		
		$productShippingCost = 0;
		$memberType = new MM_MemberType($user->getMemberTypeId());
		$confirmationPage = $this->getReturnUrl($product, $memberType);
		$shippingCost = 0;
		if($product->isShippable()){
			$option = new MM_CampaignOptions($shippingOptionId);
			$shippingCost = $option->getAttr();	
		}
		$productIdStr = $product->getId();
		$customData = "";
		if($isFastForward){
			$productIdStr.="ff";
			$customData = $product->getDescription();
		}
		$params = array(
			'is_standard'=>1,
			'business'=>$obj->email,
			'notify_url'=>MM_MODULES_URL."/ipn/callback.php",
			'currency_code'=>'USD',
			'item_name'=>$product->getName(),
			'item_number'=>$productIdStr,
			'quantity'=>1,
			'return'=>$confirmationPage,
			'rm'=>'1',
			'cbt'=>'Return to '.get_option("blogname"),
			'cancel_return'=>get_option("siteurl"),
			'custom'=>$user->getId(),
			'amount'=>$product->getPrice(),
			'shipping'=>$shippingCost,
			'custom'=> $customData,
		);
		
		if($product->isRecurring(false)){
			$params['modify']=1;
		//	$params['usr_manage']=1;
			$params['a3']=$product->getPrice();
			$params['p3']=$product->getRebillPeriod();
			$params['t3']=self::getFrequencyType($product->getRebillFrequency()); //D - days, W-weeks, M-months,Y-years 
		}
		
		$cmd = "_xclick-subscriptions";
		if(!$product->isRecurring(false) || $isFastForward){
			$cmd = "_xclick";
		}
		$params["cmd"] = $cmd;
		
		LogMe::write("PaypalService : params : ".json_encode($params));
		if(!$isFastForward){
			if($product->getTrialFrequency()!="" && $product->getTrialDuration()>0){
				$params["a1"] = $product->getTrialAmount();
				$params["p1"] = self::getFrequencyType($product->getTrialFrequency());
				$params["t1"] = $product->getTrialDuration();
			}
		}
		return self::getRequest($url, $params);
	}
	
	public function placeOrderCardOnFile($previousOrderId, $campaignId, $productId, $shippingId, $userId, $priceOverride="", $initializeNewSubscription=false, $additionalParams=null){
		
	}
}