class MM_AuthorizeNet 
{		
	private $loginname="";
	private $transactionkey="'";
	
	//secure.authorize.net
	private $host = "apitest.authorize.net";
//	private $host = "secure.authorize.net";
	private $path = "/xml/v1/request.api";
    
	public function __construct($loginName, $transactionKey){
		
    	$this->loginname = $loginName;
    	$this->transactionkey = $transactionKey;
    }
    
    public function processPayment($creditInfo){
    	if(!isset($creditInfo["totalOccurrences"]) || (isset($creditInfo["totalOccurrences"]) && intval($creditInfo["totalOccurrences"])<=0)){
    		return $this->processOneTime($creditInfo);
    	}
    	return $this->processRecurring($creditInfo);
    }
    
    private function processOneTime($creditInfo)
    {
		if(!isset($creditInfo["amount"]))
			return "ERROR, Enter an amount.";
		if(!isset($creditInfo["cardNumber"]))
			return "ERROR, Enter a cardNumber.";
		if(!isset($creditInfo["expirationDate"]))
			return "ERROR, Enter a expirationDate.";
		if(!isset($creditInfo["first_name"]))
			return "ERROR, Enter a firstName.";
		if(!isset($creditInfo["last_name"]))
			return "ERROR, Enter a lastName.";
		if(!isset($creditInfo["address"]))
			return "ERROR, Enter a address.";
		if(!isset($creditInfo["state"]))
			return "ERROR, Enter a state.";
		if(!isset($creditInfo["zip"]))
			return "ERROR, Enter a zip.";
		
    	$amount = $creditInfo["amount"];
    	$billingAddress = $creditInfo["address"];
    	$billing_state = $creditInfo["state"];
    	$billing_zip = $creditInfo["zip"];
		$cardNumber = $creditInfo["cardNumber"];
		$expirationDate = preg_replace("/[^0-9]+/", "", $creditInfo["expirationDate"]);
		$firstName = $creditInfo["first_name"];
		$lastName = $creditInfo["last_name"];
		
		// developer accounts: https://test.authorize.net/gateway/transact.dll
		// for real accounts (even in test mode), please make sure that you are
		// posting to: https://secure.authorize.net/gateway/transact.dll
		//"https://{$this->host}/gateway/transact.dll";//
		$post_url = "https://test.authorize.net/gateway/transact.dll";
		
		$post_values = array(
			"x_login"			=> $this->loginname,
			"x_tran_key"		=> $this->transactionkey,
		
			"x_version"			=> "3.1",
			"x_delim_data"		=> "TRUE",
			"x_delim_char"		=> "|",
			"x_relay_response"	=> "FALSE",
		
			"x_type"			=> "AUTH_CAPTURE",
			"x_method"			=> "CC",
			"x_card_num"		=> $cardNumber,
			"x_exp_date"		=> $expirationDate,
		
			"x_amount"			=> $amount,
			"x_description"		=> "Featured Payment",
		
			"x_first_name"		=> $firstName,
			"x_last_name"		=> $lastName,
			"x_address"			=> $billingAddress,
			"x_state"			=> $billing_state,
			"x_zip"				=> $billing_zip
			// Additional fields can be added here as outlined in the AIM integration
			// guide at: http://developer.authorize.net
		);
		
		//var_dump($post_values);
		
		// This section takes the input fields and converts them to the proper format
		// for an http post.  For example: "x_login=username&x_tran_key=a1B2c3D4"
		$postString = "";
		foreach( $post_values as $key => $value )
			{ $postString .= "$key=" . urlencode( $value ) . "&"; }
			
		$postString = rtrim( $postString, "& " );
		
		// This sample code uses the CURL library for php to establish a connection,
		// submit the post, and record the response.
		// If you receive an error, you may want to ensure that you have the curl
		// library enabled in your php configuration
		$request = curl_init($post_url); // initiate curl object
			curl_setopt($request, CURLOPT_HEADER, 0); // set to 0 to eliminate header info from response
			curl_setopt($request, CURLOPT_RETURNTRANSFER, 1); // Returns response data instead of TRUE(1)
			curl_setopt($request, CURLOPT_POSTFIELDS, $postString); // use HTTP POST to send form data
			curl_setopt($request, CURLOPT_SSL_VERIFYPEER, FALSE); // uncomment this line if you get no gateway response.
			$postResponse = curl_exec($request); // execute curl post and store results in $postResponse
			// additional options may be required depending upon your server configuration
			// you can find documentation on curl options at http://www.php.net/curl_setopt
		curl_close ($request); // close curl object
		
		// This line takes the response and breaks it into an array using the specified delimiting character
		$response_array = explode($post_values["x_delim_char"],$postResponse);
	
		// The results are output to the screen in the form of an html numbered list.
		return $response_array;
		
    }
    
    public function cancelRecurring($subscriptionId)
    {
//    	if(empty($subscriptionId))
//    		return "ERROR, Please include a subscription ID.";
//    		
		$loginname = $this->loginname;
		$transactionkey = $this->transactionkey;
    	
		$content =
		        "<?xml version=\"1.0\" encoding=\"utf-8\"?>".
		        "<ARBCancelSubscriptionRequest xmlns=\"AnetApi/xml/v1/schema/AnetApiSchema.xsd\">".
		        "<merchantAuthentication>".
		        "<name>" . $loginname . "</name>".
		        "<transactionKey>" . $transactionkey . "</transactionKey>".
		        "</merchantAuthentication>" .
		        "<subscriptionId>" . $subscriptionId . "</subscriptionId>".
		        "</ARBCancelSubscriptionRequest>";
		
		//send the xml via curl
//		$host = "apitest.authorize.net";
		$host = "api.authorize.net"; 
		$path = "/xml/v1/request.api";
		return $this->send_request_via_curl($this->host,$path,$content);
    }
    
    public function getRecurringStatus($subscriptionId){
		$loginname = $this->loginname;
		$transactionkey = $this->transactionkey;
    	$xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?> 
    				<ARBGetSubscriptionStatusRequest xmlns=\"AnetApi/xml/v1/schema/AnetApiSchema.xsd\">
    				 <merchantAuthentication> ".
				        "<name>" . $loginname . "</name>".
				        "<transactionKey>" . $transactionkey . "</transactionKey>".
    				"</merchantAuthentication> 
    				<refId></refId> 
    				<subscriptionId>".$subscriptionId."</subscriptionId> 
    		</ARBGetSubscriptionStatusRequest>";
		$host = "api.authorize.net"; 
		$path = "/xml/v1/request.api";
		/*
		 * list ($resultCode, $code, $text, $subscriptionId) =parse_return($response);
		 */
		return $this->sendRequestCurl($this->host,$path,$content);
    }
    
    private function processRecurring($creditInfo)
    {
    	
		if(!isset($creditInfo["amount"]))
			return "ERROR, Enter an amount.";
		if(!isset($creditInfo["cardNumber"]))
			return "ERROR, Enter a cardNumber.";
		if(!isset($creditInfo["expirationDate"]))
			return "ERROR, Enter a expirationDate.";
		if(!isset($creditInfo["first_name"]))
			return "ERROR, Enter a firstName.";
		if(!isset($creditInfo["last_name"]))
			return "ERROR, Enter a lastName.";
		if(!isset($creditInfo["address"]))
			return "ERROR, Enter a address.";
		if(!isset($creditInfo["state"]))
			return "ERROR, Enter a state.";
		if(!isset($creditInfo["zip"]))
			return "ERROR, Enter a zip.";
		if(!isset($creditInfo["totalOccurrences"]))
			return "ERROR, Enter a totalOccurrences.";
		if(!isset($creditInfo["unit"]))
			return "ERROR, Enter a unit.";
		if(!isset($creditInfo["refId"]))
			return "ERROR, Enter a refId.";
		
    	$amount = $creditInfo["amount"];
    	$billingAddress = $creditInfo["address"];
    	$billingState = $creditInfo["state"];
    	$billingZip = $creditInfo["zip"];
		$cardNumber = $creditInfo["cardNumber"];
		$expirationDate = preg_replace("/[^0-9]+/", "", $creditInfo["expirationDate"]);
		$firstName = $creditInfo["first_name"];
		$lastName = $creditInfo["last_name"];
		$userId = (isset($creditInfo["user_id"]))?$creditInfo["user_id"]:substr($cardNumber, -4);
	
		///retrofit all data
		$loginname = $this->loginname;
		$transactionkey = $this->transactionkey;
//		echo $loginname." : ".$transactionkey;
		$refId = $creditInfo["refId"]; //$userId;
		$name = $refId." ";
		$totalOccurrences = rand(9000, 9999);
		$length =$creditInfo["totalOccurrences"];
		$unit = $creditInfo["unit"];
		$startDate = Date("Y-m-d");
		$trialOccurrences = (isset($creditInfo["trialOccurrences"]))?$creditInfo["trialOccurrences"]:"";
		$trialAmount =(isset($creditInfo["trialAmount"]))?$creditInfo["trialAmount"]:""; 
//		echo "CardNUmber: {$cardNumber}";
	//build xml to post
	$content =
	        "<?xml version=\"1.0\" encoding=\"utf-8\"?>" .
	        "<ARBCreateSubscriptionRequest xmlns=\"AnetApi/xml/v1/schema/AnetApiSchema.xsd\">" .
	        "<merchantAuthentication>".
	        "<name>" . $loginname . "</name>".
	        "<transactionKey>" . $transactionkey . "</transactionKey>".
	        "</merchantAuthentication>".
			"<refId>" . $refId . "</refId>".
	        "<subscription>".
	        "<name>" . $name . "</name>".
	        "<paymentSchedule>".
	        "<interval>".
	        "<length>". $length ."</length>".
	        "<unit>". $unit ."</unit>".
	        "</interval>".
	        "<startDate>" . $startDate . "</startDate>".
	        "<totalOccurrences>". $totalOccurrences . "</totalOccurrences>";
    
	if($trialOccurrences>0){
		$content.="<trialOccurrences>". $trialOccurrences . "</trialOccurrences>";
	}
	
	$content.= "</paymentSchedule>".
		        "<amount>". $amount ."</amount>";
	
	if($trialOccurrences>0){
		$content.="<trialAmount>" . $trialAmount . "</trialAmount>";
	}
	
	$content .= "<payment>".
	        "<creditCard>".
	        "<cardNumber>" . $cardNumber . "</cardNumber>".
	        "<expirationDate>" . $expirationDate . "</expirationDate>".
	        "</creditCard>".
	        "</payment>".
			                "<order>
          <invoiceNumber>".$refId."</invoiceNumber>
          <description>".$refId."</description>
        </order>".
	
	        "<billTo>".
	        "<firstName>". $firstName . "</firstName>".
	        "<lastName>" . $lastName . "</lastName>".
	        "</billTo>".
	        "</subscription>".
	        "</ARBCreateSubscriptionRequest>";
		//echo $content;
//		exit;
//		$host = "apitest.authorize.net";
//		$host = "api.authorize.net"; 
		$path = "/xml/v1/request.api";
		$response = $this->sendRequestCurl($this->host,$path,$content);
		
		return $response;
    }
    
    /**** Recurring functions ***/
    
	function sendRequestSocketOpen($host,$path,$content)
	{
		$posturl = "ssl://" . $host;
		$header = "Host: $host\r\n";
		$header .= "User-Agent: PHP Script\r\n";
		$header .= "Content-Type: text/xml\r\n";
		$header .= "Content-Length: ".strlen($content)."\r\n";
		$header .= "Connection: close\r\n\r\n";
		$fp = fsockopen($posturl, 443, $errno, $errstr, 30);
		if (!$fp)
		{
			$response = false;
		}
		else
		{
			error_reporting(E_ERROR);
			fputs($fp, "POST $path  HTTP/1.1\r\n");
			fputs($fp, $header.$content);
			fwrite($fp, $out);
			$response = "";
			while (!feof($fp))
			{
				$response = $response . fgets($fp, 128);
			}
			fclose($fp);
			error_reporting(E_ALL ^ E_NOTICE);
		}
		return $response;
	}
	
	//function to send xml request via curl
	function sendRequestCurl($host,$path,$content)
	{
		$posturl = "https://" . $host . $path;
		$ch = curl_init();
		curl_setopt($ch, CURLOPT_URL, $posturl);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
		curl_setopt($ch, CURLOPT_HTTPHEADER, Array("Content-Type: text/xml"));
		curl_setopt($ch, CURLOPT_HEADER, 1);
		curl_setopt($ch, CURLOPT_POSTFIELDS, $content);
		curl_setopt($ch, CURLOPT_POST, 1);
		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
		$response = curl_exec($ch);
		
		return $response;
	}
	
	
	//function to parse Authorize.net response
	function parse($content)
	{
		$refId = $this->substringBetween($content,'<refId>','</refId>');
		$resultCode = $this->substringBetween($content,'<resultCode>','</resultCode>');
		$code = $this->substringBetween($content,'<code>','</code>');
		$text =$this->substringBetween($content,'<text>','</text>');
		$subscriptionId = $this->substringBetween($content,'<subscriptionId>','</subscriptionId>');
		return array ($refId, $resultCode, $code, $text, $subscriptionId);
	}
	
	//helper function for parsing response
	function substringBetween($haystack,$start,$end) 
	{
		if (strpos($haystack,$start) === false || strpos($haystack,$end) === false) 
		{
			return false;
		} 
		else 
		{
			$start_position = strpos($haystack,$start)+strlen($start);
			$end_position = strpos($haystack,$end);
			return substr($haystack,$start_position,$end_position-$start_position);
		}
	}
    
    /**** end recurring functions ****/
}