/**
 * 
 * 
MemberMouse(TM) (http://www.membermouse.com)
(c) 2010-2011 Pop Fizz Studios, LLC. All rights reserved.
 */
class MM_ProtectedContentEngine
{
	function __construct(){}

	public function saveSmartContent($id, $post){
		if($post->post_status != 'auto-draft'
			&& false === (wp_is_post_autosave($post) || wp_is_post_revision($post)))
		{
			$content = $post->post_content;
			$smartTagEngine = new MM_SmartTagEngine();
			$smartTagEngine->saveTags($content, $post->ID);
		}
	}
	
	public function protectContent($postId)
	{
		global $current_user, $post;
		
		
		LogMe::write("ProtectedContentEngine::protectContent() : postId : ".$postId);
		
		if(intval($postId)<=0)
		{
		
			if(isset($post->ID) && intval($post->ID)>0)
				$postId = $post->ID;
			else if(isset($post->data->ID) && intval($post->data->ID))
				$postId = $post->data->ID;
		}
		
		LogMe::write("ProtectedContentEngine::protectContent() : postId : ".$postId);
		
		$isBlogHomePage = false;
		$showOnFront = MM_OptionUtils::getOption("show_on_front");
		if($showOnFront == "posts" && is_home()){
		LogMe::write("ProtectedContentEngine::protectContent() : IS BLOG HOME ");
			$isBlogHomePage = true;
		}
		
		
		
		if(!$isBlogHomePage){
		
			if(isset($postId) && intval($postId)>0)
			{
				if(!$this->canAccessPost($postId,$current_user->ID))
				{
					$next_page_id = MM_CorePageEngine::getCorePageId(MM_CorePageType::$ERROR, 'error_type', MM_ErrorType::$ACCESS_DENIED);
					
					if($next_page_id!=$postId)
					{
		
						$url = MM_CorePageEngine::getUrl(MM_CorePageType::$ERROR, MM_ErrorType::$ACCESS_DENIED);
						$url = MM_Utils::appendUrlParam($url, MM_Session::$PARAM_MESSAGE_KEY, MM_ErrorType::$ERROR_MSG_DENIED, true);
						
						if(!is_feed()){
							wp_redirect($url);
							exit;
						}
						return false;
					}
				}
				else
				{
					/*
					 * Permissions are available so...
					 * Check if LLS page
					 * Otherwise check if trying to go home
					 * Otherwise, let them view content
					 */
					$cpe = new MM_CorePageEngine();
					$llsPage = $cpe->getLimeLightSuccessPage($postId);
					if($llsPage!==false)
					{
						$response =  $cpe->processLimeLightSuccess();
						
						if($response->type == MM_Response::$SUCCESS){
							wp_redirect($response->message);
							exit;
						}
					}
					else {
						MM_CorePageEngine::redirectToHomePage();
					}
				}
			}
		}
		
		return true;
	}

	public static function getPostDays($access_type, $access_id)
	{
		global $wpdb;
		
		$sql = "select days from ".MM_TABLE_POSTS_ACCESS." where access_type='{$access_type}' and access_id='{$access_id}'";
 		$rows = $wpdb->get_results($sql);
 		if($rows===false)
 		{
 			return array();
 		}
 		$days = array();
 		foreach($rows as $row)
 		{
 			$days[$row->days] = $row->days;
 		}
 		return $days;
	}
	
 	public static function getAccessRights($pageId)
 	{
 		global $wpdb;
 		$sql = "select mt.name as mt_name, at.name as at_name, p.access_type from ".MM_TABLE_POSTS_ACCESS." p
 						LEFT JOIN ".MM_TABLE_MEMBER_TYPES." mt on p.access_type='member_type' and p.access_id=mt.id
 						LEFT JOIN ".MM_TABLE_ACCESS_TAGS." at on p.access_type='access_tag' and p.access_id=at.id

 					where  p.is_smart_content='0' and post_id='{$pageId}'"; 
 		
 		$rows = $wpdb->get_results($sql);
 		if($rows===false)
 		{
 			return array();
 		}
 		return $rows;
 	}
	
 	/**
 	 * @param $user_id is the id of the user
 	 * @param $access_type is the access type of the given request (access_tag|member_type)
 	 * @param $access_id is the id of the given type (see previous)
 	 * @param $days is the days of the chunk parameter.
 	 * @return true if access is granted to content chunk, otherwise false.
 	 */
 	public function canAccessChunk($user_id, $access_type, $access_id, $days)
 	{
 		$user_obj = new MM_User($user_id);
 		$user_perms = new stdClass();
 		if($user_obj->isAdmin())
 		{
 			///get preview mode access
 			$user_perms = $this->getPreviewAccess();
 			
	 		if(empty($user_perms))
	 			return false;
 		}
 		else
 		{
	 		$user_perms = $this->getUserPerms($user_id);
	 		if(empty($user_perms))
	 			return false;
 		}
 		
 		if(isset($user_perms->$access_type) && !empty($user_perms->$access_type))
		{
			/*
			 * Get days as member to calculate for comparison for the post/page number of days
			 * If a user-applied access tag exists use the date difference for that user and that tag.
			 * If the access tag is derived from a member type, use the days as member number for comparison.
			 */
			$user_days = $user_perms->days_as_member;
			if($access_type == "access_tags")
				$user_days = $this->calculateAccessTagDaysByMember($access_id, $user_id);
				
			/// case when access tag is not type 'user' (i.e. type 'member_type') and should use days as member days correlation.
			if($user_days===false)
				$user_days = $user_perms->days_as_member;
				
			if(($index= array_search($access_id, $user_perms->$access_type))!==false )
			{
				//echo $user_days." >= ".$days."<br />";
				if($user_days>=$days)
					return true;
			}
		}
		return false;
 	}
 	
 	/*
 	 * Obtains the post permissions and the user permissions
 	 * if the post permissions finds a match in the users it will compare days and premit/deny.
 	 * @param $user_id is the id of the user
 	 * @param $post_id is the id of the post
 	 * @return boolean true if accessible, otherwise false;
 	 */
 	public function canAccessPost($post_id, $user_id)
 	{
		
 		$post_perms= new stdClass();
 		$user_perms = new stdClass();
 	
 		$post_perms = $this->getPostPerms($post_id);
		
 		$user_obj = new MM_User($user_id);
 		if($user_obj->isAdmin())
 		{
 			///get preview mode access
 			///use these perms
 			$user_perms = $this->getPreviewAccess();
	 		
 			if(empty($user_perms))
	 			return false;
 		}
 		else
 		{
	 		$user_perms = $this->getUserPerms($user_id);
 		}	
 		
 		if(empty($post_perms) || (empty($post_perms->access_tags) && empty($post_perms->member_types))){
 			return true;
 		}
 		
 		if(empty($user_perms)){
 			return false;
 		}
 		
 		foreach($post_perms as $access_type=>$arr)
 		{
 			if(empty($arr))
 				continue;
 				
 			foreach($arr as $access_id=>$days)
 			{
 				if(isset($user_perms->$access_type) && !empty($user_perms->$access_type))
 				{
 					/*
 					 * Get days as member to calculate for comparison for the post/page number of days
 					 * If a user-applied access tag exists use the date difference for that user and that tag.
 					 * If the access tag is derived from a member type, use the days as member number for comparison.
 					 */
 					$user_days = $user_perms->days_as_member;

 					if($access_type == "access_tags")
 						$user_days = $this->calculateAccessTagDaysByMember($access_id, $user_id);
 						
 					/// case when access tag is not type 'user' (i.e. type 'member_type') and should use days as member days correlation.
 					if($user_days===false)
 						$user_days = $user_perms->days_as_member;
 				
 					if(($index= array_search($access_id, $user_perms->$access_type))!==false )
	 				{
	 					if($user_days>=$days){
		
	 						return true;
	 					}
	 				}
 				}	
 			}
 		}
		
 		return false;
 	}
 	
	/*
	 * Counts number of days to access content (negative number)
	 * If already had access, it will display a [0-9]+ days to access.
	 * Otherwise false if no access ever.
	 */
 	public function daysToAccess($post_id, $user_id)
 	{
 		$post_perms= new stdClass();
 		$user_perms = new stdClass();
 	
 		$post_perms = $this->getPostPerms($post_id);
 		$user_obj = new MM_User($user_id);
 		
 		if($user_obj->isAdmin())
 		{
	 		return false;
 		}
 		else
 		{
	 		$user_perms = $this->getUserPerms($user_id);
 		}	
 		
 		if(empty($post_perms) || (empty($post_perms->access_tags) && empty($post_perms->member_types)))
 			return false;
 		
 		if(!isset($user_perms->days_as_member)){
 			return false;
 		}
 		
 		foreach($post_perms as $access_type=>$arr)
 		{
 			if(empty($arr))
 				continue;
 				
 			foreach($arr as $access_id=>$days)
 			{
 				if(isset($user_perms->$access_type) && !empty($user_perms->$access_type))
 				{
 					$user_days = $user_perms->days_as_member;

 					if($access_type == "access_tags")
 						$user_days = $this->calculateAccessTagDaysByMember($access_id, $user_id);
					
 				
 					if(($index= array_search($access_id, $user_perms->$access_type))!==false )
	 				{
	 					if($days>0){
	 						return intval($user_days)-intval($days);
	 					}
	 				}
 				}	
 			}
 		}
 		return false;
 	}
 	
 	
 	public function getPostAccessRights($post_id)
 	{
 		global $wpdb;
 		
 		$sql = "select IF(pa.access_type='member_type', mt.name, at.name) as access_name,pa.days, IF(pa.access_type='member_type', mt.badge_url, at.badge_url) as badge_url, pa.access_type, pa.access_id from " .
 				"	".MM_TABLE_POSTS_ACCESS." pa " .
	 			" 	LEFT JOIN ".MM_TABLE_MEMBER_TYPES." mt on pa.access_type='member_type' and pa.access_id=mt.id " .
	 			" 	LEFT JOIN ".MM_TABLE_ACCESS_TAGS." at on pa.access_type='access_tag' and pa.access_id=at.id " .
	 			"	where pa.post_id='{$post_id}' and pa.is_smart_content!='1' ";
	 			
 		$rows = $wpdb->get_results($sql);
 		if(!$rows)
 			return array();
 			
 		return $rows;
 	}
 	
 	public function removeAccessRights($post_ID, $access_id, $access_type)
 	{
 		global $wpdb;
 		$sql = "delete from ".MM_TABLE_POSTS_ACCESS." where post_id='%d' AND access_id='%d' AND access_type='%s'";
 		LogMe::write($sql." : $post_ID, $access_id, $access_type");
 		return $wpdb->query($wpdb->prepare($sql, $post_ID, $access_id, $access_type));
 	}
 	
	public function removeAllRights($post_id)
	{
		global $wpdb;
		
		$sql = "delete from  ".MM_TABLE_POSTS_ACCESS." where post_id='{$post_id}'";
		return $wpdb->query($sql);
	}
	
 	public function updatePostAccessRights($post_id, $access_type, $access_id, $days=0)
 	{
 		global $wpdb;
 			$sql = "update ".MM_TABLE_POSTS_ACCESS." set " .
 				"days='%s' where ". 
 				"access_id='%d' and access_type='%s' and post_id='%d' ";
 				
		return $wpdb->query($wpdb->prepare($sql, $days,$access_id,$access_type,$post_id));
 	}
 	
 	/*
 	 * @post_id is the WP post id
 	 * @param $access_type (member_type|access_tag)
 	 * @param $access_id is the primary key of the associated access_type
 	 * @days is the number of days
 	 * @return true if successful, otherwise false.
 	 */
 	public function setPostAccessRights($post_id, $access_type, $access_id, $days=0)
 	{
 		global $wpdb;
 		$sql = "select count(*) as total from ".MM_TABLE_POSTS_ACCESS." where post_id='{$post_id}' and access_type='{$access_type}' and access_id='{$access_id}'";
 		$row = $wpdb->get_row($sql);
 		if($row->total>0)
 			return false;
 			
 		$sql = "insert into ".MM_TABLE_POSTS_ACCESS." set " .
 				"post_id='%d', " .
 				"access_type='%s', " .
 				"access_id='%d', " .
 				"days='%s' ";
		return $wpdb->query($wpdb->prepare($sql, $post_id, $access_type, $access_id, $days));
 	}
 	
 	public function getDays($access_id, $access_type, $post_id)
 	{
 		global $wpdb;
 		$sql = "select days from  ".MM_TABLE_POSTS_ACCESS." where post_id='{$post_id}' and access_type='{$access_type}' and access_id='{$access_id}' limit 1";
 		$row = $wpdb->get_row($sql);
 		if(!$row)
 			return 0;
 		
 		return $row->days;
 	}
 	
 	/*
 	 * Admin function to determine preview access based on preview bar
 	 * @return true if can access post, otherwise false.
 	 */
 	public function getPreviewAccess()
 	{
 		global $current_user;
 	 	
 	 	//// get info
 	 	$preview_obj = MM_Preview::getData();
 	 	
 	 	if(!$preview_obj){	
 	 		return false;
 	 	}
 	 	
 	 	$uobj = new stdClass();
 	 	$uobj->member_types = array($preview_obj->getMemberTypeId());
 	 	$uobj->access_tags = $preview_obj->getAccessTags();
 	 	$uobj->days_as_member = $preview_obj->getDays();
 	 	LogMe::write("getPreviewAccess() : ".json_encode($uobj));
 	 	return $uobj;
 	}
 	
 	/*
 	 * Get user related permissions
 	 * member_types=array(membertype_id1,membertype_id2)
 	 * access_tags=array(access_tags_id1,access_tags_id2)
 	 * days_as_member=>[Users use mm_registered] + mm_fixed_days
 	 * @param $user_id is the id of given user
 	 * @return object of user perms.
 	 */
 	private function getUserPerms($user_id)
 	{
 	 	$uobj = new stdClass();
 	 	$uobj->member_types = array();
 	 	$uobj->access_tags = array();
 	 	$uobj->days_as_member =0;
 	 	
 		$user_obj = get_userdata($user_id);
 		if(!$user_obj)
 			return $uobj;
 			
 		/// look up member type and associated access tags
 	 	/// look up user specific access tags.
 	 	
 	 	$uobj->member_types = array(
 	 		$user_obj->mm_member_type_id
 	 	);
 	 	
 	 	$memberType = new MM_MemberType($user_obj->mm_member_type_id);
 	 	$tags = $memberType->getAccessTags();
 	 	if(!empty($tags) && is_array($tags))
 	 	{
	 	 	foreach($tags as $id=>$name)
	 	 	{
	 	 		array_push($uobj->access_tags, $id);
	 	 	}
 	 	}
 	 	unset($tags);
 	 	
 	 	$user_c = new MM_User($user_id);
 	 	$tags = $user_c->getAccessTags();
 	 	if(!empty($tags) && is_array($tags))
 	 	{
	 	 	foreach($tags as $access_tag_obj)
	 	 	{
	 	 		array_push($uobj->access_tags, $access_tag_obj->access_tag_id);
	 	 	}
 	 	}
 	 	
 	 	$uobj->days_as_member = $this->calculateDaysAsMembers(new MM_User($user_id));
 	 	
 	 	return $uobj;
 		
 	}
 	
 	/*
 	 * Private get post permissions
 	 * member_types= array(membertype_id=>day accessible)
 	 * access_tags = array(access_tag_id=>day accessible)
 	 * @param $post_id is the id of the post/page
 	 * @return an object identifying the member types and access tags that are allowed to view post.
 	 */
 	 private function getPostPerms($post_id, $isChunk=false)
 	 {
 	 	global $wpdb;
 	 	
 	 	$obj = new stdClass();
 	 	$obj->member_types = array();
 	 	$obj->access_tags = array();
 	 	
 	 	$chunkSql = " and is_smart_content='0' ";
 	 	if($isChunk){
 	 		$chunkSql = " and is_smart_content='1' ";
 	 	}
 	 	$sql = "select access_type, access_id, days from ".MM_TABLE_POSTS_ACCESS." where post_id='{$post_id}' {$chunkSql}";
 	 	
 	 	$rows = $wpdb->get_results($sql);
 	 	if(is_null($rows) || !$rows)
 	 		return $obj;
 	 	
 	 	foreach($rows as $row)
 	 	{
 	 		switch($row->access_type)
 	 		{
 	 			case "access_tag":
 	 				$obj->access_tags[$row->access_id] = $row->days;
 	 			break;
 	 			default:
 	 				$obj->member_types[$row->access_id] = $row->days;
 	 			break;
 	 		}
 	 	}
 	 	return $obj;
 	 }
 	 
 	 private function calculateAccessTagDaysByMember($accessTagId, $userId)
 	 {
 	 	global $wpdb;
 	 	
 		$user_obj = new MM_User($userId);
 		if($user_obj->isAdmin())
 		{
 			$preview = MM_Preview::getData();
 			return $preview->getAppliedDays($accessTagId);
 		}
 		
 	 	//// get access tag date as applied to users account
 	 	$sql = "select apply_date from ".MM_TABLE_APPLIED_ACCESS_TAGS." where ref_id='{$userId}' and access_type='user' and access_tag_id='{$accessTagId}' and is_refunded='0' and status='1'";
 	 	$row = $wpdb->get_row($sql);
 	 	if(is_null($row))
 	 		return false;
 	 		
 	 	return $user_obj->getTagDaysAsMember($accessTagId);	
 	 		
 	 	//return MM_Utils::calculateDaysDiff($row->apply_date, Date("Y-m-d"));
 	 }
 	 
 	 /*
 	  * Calculate days as member from registered date.
 	  * Take registration date and today's date and find the difference.
 	  */
 	 private function calculateDaysAsMembers($userObj=null)
 	 {
 	 	global $current_user;
 	 	if($userObj instanceof MM_User){
 	 		if($userObj->isValid()){
 	 			if($userObj->getDaysCalcMethod() == "custom_date"){
	 	 			$date = $userObj->getDaysCalcValue();
	 	 			$remainingDays = MM_Utils::calculateDaysDiff($date, Date("Y-m-d"));
	 	 			return $remainingDays;
 	 			}
 	 			else if($userObj->getDaysCalcMethod() == "fixed"){
	 	 			return $userObj->getDaysCalcValue();
 	 			}
 	 			else{
	 	 			$date = array_shift(explode(" ", $userObj->getRegistrationDate()));
	 	 			$remainingDays = MM_Utils::calculateDaysDiff($date, Date("Y-m-d"));
	 	 			return $remainingDays;
 	 			}
 	 		}
 	 	}
 	 	
 	 	if(!isset($current_user->ID))
 	 		return 0;
 	 		
 	 	if(intval($current_user->ID)<=0)
 	 		return 0;
 	 		
  		if($userObj->getDaysCalcMethod() == "fixed"){
  			return intval($current_user->mm_days_calc_value);
  		}
  		else if($userObj->getDaysCalcMethod() == "custom_date"){
	 	 	return MM_Utils::calculateDaysDiff($current_user->mm_days_calc_value, Date("Y-m-d"));
  		}
  		else{
	 	 	$registered_date = array_shift(explode(" ", $current_user->mm_registered));
	 	 	return MM_Utils::calculateDaysDiff($registered_date, Date("Y-m-d"));
  		}
 	 }
 }
