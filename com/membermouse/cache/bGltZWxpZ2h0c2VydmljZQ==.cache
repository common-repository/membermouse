/**
 * 
 * 
MemberMouse(TM) (http://www.membermouse.com)
(c) 2010-2011 Pop Fizz Studios, LLC. All rights reserved.
 */
class MM_LimeLightService extends MM_PaymentService
{
	public static $STATUS_SUCCESS = "success";
//	public static $REBILL_STATUS_START = "start";
//	public static $REBILL_STATUS_STOP = "stop";
//	public static $REBILL_STATUS_RESET = "reset";
	public static $URL_MEMBERSHIP_API = "/admin/membership.php";
	public static $URL_TRANSACTION_API = "admin/transact.php";
	
	
	protected function saveMember($post){}
	public function handleCallback($request){}
	
	public static function validate($apiUrl, $username, $password)
	{
		global $mmSite;
		
		$mmSite->setLLUrl($apiUrl);
		$mmSite->setLLUsername($username);
		$mmSite->setLLPassword($password);
		
		$result = MM_LimeLightService::call("validate_credentials", false, "", false);
			
		return MM_LimeLightService::isSuccessful($result);
	}
	
	public static function setupProfile($isRemoving=false){
		global $wpdb,$mmSite,$current_user;
		
		$emailSent = MM_OptionUtils::getOption("mm-profile-setup");
		if($emailSent=='0' && !$mmSite->isMM()){
			$sql = "select * from ".MM_TABLE_API_KEYS. " order by id desc limit 1";
			$row = $wpdb->get_row($sql);
			if(isset($row->api_key) && isset($row->api_secret) && $row->api_key!=""){
				self::sendApiSetupRequest($row->api_key,$row->api_secret);
			}
		}
		else{
			if(!is_admin()){
				self::sendProfileReminder($isRemoving);
			}
		}
		return true;
	}
	
	public static function sendProfileReminder($isRemoving=false){
		global $wpdb,$mmSite,$current_user;
		
		$mmSite = new MM_Site();
		$user = new MM_User($current_user->ID);
		$emailAccount = MM_EmailAccount::getDefaultAccount();
		
		$context = new MM_Context($user, $emailAccount);
		$bodyOfEmail = "You've modified your site to include the following campaign ID(s), please make sure you update your Lime Light campaign accordingly.\n\n";
		if($isRemoving){
			$bodyOfEmail = "You've modified your site to remove campaign ID(s), please make sure you update your Lime Light campaign accordingly.\n\n";
		}
		
		$mmApiUrl = "";
		$baseurl = MM_OptionUtils::getOption("siteurl");
		if(!defined("MM_API_URL")){
			$mmApiUrl =$baseurl."/wp-content/plugins/".MM_PLUGIN_NAME."/api/request.php";
		}
		else{
			$mmApiUrl = MM_API_URL;
		}
		
		$emailObj = new MM_Email();
		$emailObj->setFromAddress($emailAccount->getAddress());
		
		$fromName = $emailAccount->getName();
		if(empty($fromName)){
			$fromName =$emailAccount->getAddress();
		}
		
		$bodyOfEmail .= "Campaign ID(s): ".$mmSite->getCampaignIds()."\n";
		$bodyOfEmail .= "Thank you,\n";
		$bodyOfEmail .= "{$fromName}";
		
		$emailObj->setFromName($fromName);
		$emailObj->setContext($context);
		$emailObj->setToAddress($user->getEmail());

		$emailObj->setToName("Lime Light Reminder");
		$emailObj->setSubject("Lime Light Integration Reminder");
		$emailObj->setBody($bodyOfEmail);
		
		$response = $emailObj->send();
		if($response->type == MM_Response::$ERROR){
			LogMe::write("MM_Email.send() : ERROR : ".$response->message);
		}
	}
	
	public static function sendApiSetupRequest($apiKey, $apiSecret){
		global $wpdb,$mmSite,$current_user;
		
		$mmSite = new MM_Site();
		$user = new MM_User($current_user->ID);
		$emailAccount = MM_EmailAccount::getDefaultAccount();
		
		$bodyOfEmail = "";
		$context = new MM_Context($user, $emailAccount);
		if(!empty($apiKey)){
			$bodyOfEmail = "Please create a MemberMouse profile with the following information:\n\n";
			$bodyOfEmail .= "LimeLight URL: ".$mmSite->getLLUrl()."\n";
			$bodyOfEmail .= "Alias: " . MM_OptionUtils::getOption("blogname")."\n";
			$bodyOfEmail .= "Campaign ID(s): ".$mmSite->getCampaignIds()."\n";
			$bodyOfEmail .= "API Key: ".$apiKey."\n";
			$bodyOfEmail .= "API Password: ".$apiSecret."\n";
		}	
		else{
			$bodyOfEmail = "Please update a MemberMouse profile with the following information:\n\n";
			$bodyOfEmail .= "LimeLight URL: ".$mmSite->getLLUrl()."\n";
			$bodyOfEmail .= "Campaign ID(s): ".$mmSite->getCampaignIds()."\n";
		}	
		
		$mmApiUrl = "";
		$baseurl = MM_OptionUtils::getOption("siteurl");
		if(!defined("MM_API_URL")){
			$mmApiUrl =$baseurl."/wp-content/plugins/".MM_PLUGIN_NAME."/api/request.php";
		}
		else{
			$mmApiUrl = MM_API_URL;
		}
		
		$emailObj = new MM_Email();
		$emailObj->setFromAddress($emailAccount->getAddress());
		
		$fromName = $emailAccount->getName();
		if(empty($fromName)){
			$fromName =$emailAccount->getAddress();
		}
		$emailObj->addCC($user->getEmail(), $user->getFullName());
		
		$bodyOfEmail .= "Url of API: ".$mmApiUrl."\n\n";	
		$bodyOfEmail .= "Thank you,\n";
		$bodyOfEmail .= "{$fromName}";
		
		$emailObj->setFromName($fromName);
		$emailObj->setContext($context);
		
		// test
		if(isLocalInstall("membermouse.localhost")){
			$emailObj->setToAddress("matt@membermouse.com");
		}
		else{
			$emailObj->setToAddress("support@limelightcrm.com");
			$emailObj->addCC("matt@membermouse.com", "MemberMouse Team");
		}
		$emailObj->addCC("support@membermouse.com", "MemberMouse Team");
		
		$emailObj->setToName("LimeLight Integration Team");
		$emailObj->setSubject("MemberMouse Profile Request");
		$emailObj->setBody($bodyOfEmail);
		
		MM_OptionUtils::setOption("mm-profile-setup","1");
		
		if(!isLocalInstall()){
			$response = $emailObj->send();
			if($response->type == MM_Response::$ERROR){
				LogMe::write("MM_Email.send() : ERROR : ".$response->message);
			}
		}
		else{
			LogMe::write("MM_Email.send() : Not sent due to localhost install. Would have sent {$bodyOfEmail}");
		}
	}
	
	public static function sync() 
	{
		global $mmSite;
				LogMe::write("sync(): ".__LINE__);
		$mmSite = new MM_Site();
		$ids = explode(",", $mmSite->getCampaignIds());
		LogMe::write("sync(): ".__LINE__." : ".$ids);
		foreach($ids as $id){
				LogMe::write("sync(): ".__LINE__." : ".$id);
			$result = MM_LimeLightService::getCampaign($id);
			
			if($result) 
			{
				LogMe::write("sync(): ".__LINE__);
				$campaign = new MM_Campaign($id, false);
				
				LogMe::write("sync(): ".__LINE__);
				$campaign->setName($result["campaign_name"]);
				$campaign->setDescription($result["campaign_description"]);
				$campaign->setProducts($result["product_id"]);
				
				LogMe::write("sync(): ".__LINE__);
				$campaign->rawData = $result; 
			    $response = $campaign->commitData();
			    if($response->type==MM_Response::$ERROR){
				LogMe::write("sync(): ".__LINE__);
			    	return $response;
			    }
			    
				LogMe::write("sync(): ".__LINE__);
			} 
			else {
				LogMe::write("Could not find campaign ID: ".$mmSite->getCampaignIds()." RESULTS: ".$result);
				return false;
			}
		}
				LogMe::write("sync(): ".__LINE__);
		return new MM_Response();
	}
	
	public static function getCampaign($campaignId)
	{
		$result = MM_LimeLightService::call("campaign_view", array("campaign_id"=>$campaignId));
		
		if(!MM_LimeLightService::isSuccessful($result)) {
			return false;
		}
		
		return $result;	
	}
	
	public static function getCampaigns()
	{
		$result = MM_LimeLightService::call("campaign_find_active", array());
		
		if(!MM_LimeLightService::isSuccessful($result)) {
			return false;
		}
		
 		$campaignIds = MM_Utils::explode(",", $result["campaign_id"]);
 		$campaignNames = MM_Utils::explode(",", $result["campaign_name"]);
 		$campaigns = array();
 		
		for($i=0; $i<count($campaignIds); $i++)
 		{
 			$campaigns[$campaignIds[$i]] = $campaignNames[$i]." (".$campaignIds[$i].")";
 		}
		
		return $campaigns;	
	}
	
	public static function getProduct($productId)
	{
		global $wpdb;
		
		$result = MM_LimeLightService::call("product_index", array("product_id"=>$productId));
		
		if(!MM_LimeLightService::isSuccessful($result)) {
			return false;
		}
		
		$data = new stdClass();
		
	 	foreach($result as $k=>$v)
	 	{
	 		$data->$k = $v;
	 	}
	 	
	 	return $data;
	}
	
	public static function syncProducts($campaignId, $productIds) 
	{
		global $wpdb;
		
		$result = MM_LimeLightService::call("product_index", array("product_id"=>$productIds));
		
		if(!MM_LimeLightService::isSuccessful($result)) {
			return false;
		}
		LogMe::write("syncProducts() : ".json_encode($result));
		
		// deactivate all products
		$sql = "UPDATE ".MM_TABLE_PRODUCTS." SET status = '0' where campaign_id='{$campaignId}' ";
		$wpdb->query($sql);
		
 		$productIds = MM_Utils::explode(",", $productIds);
 		
 		$productNames = MM_Utils::explode(",", $result["product_name"]);
 		$productSkus = MM_Utils::explode(",", $result["product_sku"]);
 		$productPrices = MM_Utils::explode(",", $result["product_price"]);
 		$productDescriptions = MM_Utils::explode(",", $result["product_description"]);
 		$productCategories = MM_Utils::explode(",", $result["product_category_name"]);
 		$productTrial = MM_Utils::explode(",", $result["product_is_trial"]);
 		$productShippable = MM_Utils::explode(",", $result["product_is_shippable"]);
 		$productRebillProducts = MM_Utils::explode(",", $result["product_rebill_product"]);
 		$productRebillDays = MM_Utils::explode(",", $result["product_rebill_days"]);
 		
 		for($i=0; $i<count($productIds); $i++)
 		{
 			if(empty($productIds[$i]) || empty($productNames[$i])){
 				continue;
 			}
 			
 			$product = new MM_Product();
 			
 			$product->setProductId($productIds[$i]);
 			$product->setCampaignId($campaignId);
 			$product->setName($productNames[$i]);
 			$product->setSku($productSkus[$i]);
 			$product->setPrice($productPrices[$i]);
 			$product->setDescription($productDescriptions[$i]);
 			$product->setCategoryName($productCategories[$i]);
 			$product->setIsTrial($productTrial[$i]);
 			$product->setIsShippable($productShippable[$i]);
 			$product->setRebillProductId($productRebillProducts[$i]);
 			$product->setRebillPeriod($productRebillDays[$i]);
 			
 			if(!$product->commitData()) {
 				return false;
 			}
 		}
		
		return true;	
	}
	
	public function placeOrder(MM_Order $order)
	{
		$params = array();
		
	 	$params['campaignId'] = $order->getCampaignId();
	 	
	 	$product = new MM_Product($order->getProuctId());
    	$params['productId'] = $product->getProductId();
		
	    if(intval($order->getUpsellCount())>0)
	    {
	    	$params['upsellCount'] = $order->upsellCount;
	    	$params['upsellProductIds'] = $order->upsellProductIds;
	    }
	    
    	$params['shippingId'] = $order->getShippingMethod();
    	$params['billingSameAsShipping'] = $order->getBillingSameAsShipping();
    	
    	$params['creditCardType'] = $order->getPaymentMethod();
    	$params['creditCardNumber'] = $order->getCCNumber();
    	$params['expirationDate'] = $order->getExpDate();
    	$params['CVV'] = $order->getSecurityCode();
    	$params['tranType'] = 'Sale'; // Sale or Capture
    	
    	$customer = $order->getCustomer();
    	
    	$params['firstName'] = $customer->getFirstName();
    	$params['lastName'] = $customer->getLastName();
    	$params['phone'] = $customer->getPhone();
    	$params['email'] = $customer->getEmail();
    	
    	$params['shippingAddress1'] = $customer->getShippingAddress();
    	$params['shippingCity'] = $customer->getShippingCity();
    	$params['shippingState'] = $customer->getShippingState();
    	$params['shippingZip'] = $customer->getShippingZipCode();	
    	$params['shippingCountry'] = $customer->getShippingCountry();
    	
    	$params['billingAddress1'] = $customer->getBillingAddress();
    	$params['billingCity'] = $customer->getBillingCity();
    	$params['billingState'] = $customer->getBillingState();
    	$params['billingZip'] = $customer->getBillingZipCode();
    	$params['billingCountry']  = $customer->getBillingCountry();
    	
    	$params['ipAddress'] = $customer->getIpAddress();
    	
    	// TODO May be added later
//    	$params['notes'] = "order created by MemberMouse";
		
    	// TODO ERIC add affiliate tracking support
    	
    	$params['AFID'] = MM_RetentionReport::getAffiliateCookie(MM_OPTION_TERMS_AFFILIATE);
    	$params['SID'] = MM_RetentionReport::getAffiliateCookie(MM_OPTION_TERMS_SUB_AFFILIATE);
    	$params['AFFID'] = "";
    	$params['C1'] = "";
    	$params['C2'] = "";
    	$params['C3'] = "";
    	$params['AID'] = "";
    	$params['OPT'] = "";

		$result = MM_LimeLightService::call("NewOrder", $params, "/admin/transact.php");
		
		if(!MM_LimeLightService::isSuccessful($result)) {
			return MM_LimeLightUtils::getErrorMessage($result);
		}
		
		$response = new stdClass();
    	$response->customerId =$result["customerId"];
    	
        $response->orderID = $result["orderId"]; 
        MM_Session::value(MM_Session::$KEY_LAST_CAMPAIGN_ID, $order->getCampaignId());
        MM_Session::value(MM_Session::$KEY_LAST_ORDER_ID, $response->orderID);
    	
    	$response->transactionId = isset($result["transactionId"]) ? $result["transactionId"] : ""; 
    	$response->authId = isset($result["authId"]) ? $result["authId"] : "";
    	
    	return $response;
	}
	
	public function placeOrderCardOnFile($previousOrderId, $campaignId, $productId, $shippingId, $userId, $priceOverride="", $initializeNewSubscription=false, $additionalParams=null)
	{
		global $mmSite;
		
		$params = array();
		
		$params['campaignId'] = $campaignId;
		
		$product = new MM_Product($productId);
		$params['productId'] = $product->getProductId();
		
		if($shippingId != "") {
			$params['shippingId'] = $shippingId;
		}
		else {
			// TODO LIMELIGHT LL is implementing a fix to support passing NA when no shipping ID is available or necessary
			// TEST ONLY
			$params['shippingId'] = "1";
		}
		$params["initializeNewSubscription"] = 1;
		
		$params['previousOrderId'] = $previousOrderId;
    	$params['AFID'] = MM_RetentionReport::getAffiliateCookie(MM_OPTION_TERMS_AFFILIATE);
    	$params['SID'] = MM_RetentionReport::getAffiliateCookie(MM_OPTION_TERMS_SUB_AFFILIATE);
		$params['notes'] = "order created by MemberMouse for member ID '".$userId."'";
		if(is_array($additionalParams)){
			foreach($additionalParams as $k=>$v){
				$params[$k] = $v;
			}
		}
		if($priceOverride != "") {
			$params['dynamic_product_price_'.$product->getProductId()] = $priceOverride;
		}
		LogMe::write("LLS.changeMembership() : calling NewOrderCardOnFile() using this product: ".$product->getProductId());
    	$result = MM_LimeLightService::call("NewOrderCardOnFile", $params, "/admin/transact.php");
		
		if(!MM_LimeLightService::isSuccessful($result)) {
			return MM_LimeLightUtils::getErrorMessage($result);
		}
		
		$response = new stdClass();
    	$response->customerId =$result["customerId"];
    	
        $response->orderId = $result["orderId"]; 
        MM_Session::value(MM_Session::$KEY_LAST_ORDER_ID, $response->orderId);
    	
    	$response->transactionId = isset($result["transactionId"]) ? $result["transactionId"] : ""; 
    	$response->authId = isset($result["authId"]) ? $result["authId"] : "";
    	
    	return $response;
	}
	
	public function purchaseProduct(MM_User $user, $productId, $initializeNewSubscription=false, $paymentOptionId=0, $shippingOptionId=0, $isFastForward=false)
	{
		global $mmSite;
		
		if($user->hasCardOnFile()) 
		{
			$crntOrder = new MM_Order($user->getLastOrderId(true));
			
			if(!$crntOrder->isValid()) {
				return new MM_Response("Unable to purchase product. Order ID '".$user->getLastOrderId(true)."' is invalid.", MM_Response::$ERROR);
			}
		}
		else {
			return new MM_Response("A card on file is required to purchase a product", MM_Response::$ERROR);
		}
		
		$product = new MM_Product();
		if($productId instanceof MM_Product){
			$product = $productId;	
			$productId = $product->getId();
		}
		else{
			$product = new MM_Product($productId);
		}
		
		$additionalParams=array();
		if($isFastForward){
			$additionalParams["dynamic_product_price_".$productId] = $product->getPrice();
		}
		$result = $this->placeOrderCardOnFile($crntOrder->getId(), $product->getCampaignId(), $productId, $crntOrder->getShippingMethod(), $user->getId(),$product->getPrice(),$initializeNewSubscription,$additionalParams);
		
		if($result instanceof MM_Response) {
			return $result;
		}
		
		return $result->orderId;
	}
	
	public static function _findOrder($campaignId, $customerId, $fromDate, $toDate, $fromTime="", $toTime=""){
		$result = null;
		if($customerId<=0){
			return new MM_Response("Invalid customer ID", MM_Response::$ERROR);
		}
		$params = array('campaign_id'=>$campaignId, 'criteria'=>'all,customer_id='.$customerId, 'start_date'=>$fromDate, 'end_date'=>$toDate);
		
		if(!empty($fromTime)){
			$params["start_time"]=$fromTime;
		}
		if(!empty($toTime)){
			$params["end_time"]=$toTime;
		}
		$result = MM_LimeLightService::call("order_find", $params);
		
		if(!MM_LimeLightService::isSuccessful($result)) {
			return MM_LimeLightUtils::getErrorMessage($result);
		}
//		echo "<pre>";
//		var_dump($result);
//		exit;
		return $result;
	}
	
	public static function findOrder($campaignId, $fromDate, $toDate, $fromTime="", $toTime=""){
		$result = null;
		$params = array('campaign_id'=>$campaignId, 'criteria'=>'all', 'start_date'=>$fromDate, 'end_date'=>$toDate);
		if(!empty($fromTime)){
			$params["start_time"]=$fromTime;
		}
		if(!empty($toTime)){
			$params["end_time"]=$toTime;
		}
		$result = MM_LimeLightService::call("order_find", $params);
		
		if(!MM_LimeLightService::isSuccessful($result)) {
			return MM_LimeLightUtils::getErrorMessage($result);
		}
		return $result;
	}
	
	public static function getActiveCustomerOrderHistory($customerId,$fromDate,$toDate){
//		$result = MM_LimeLightService::call("order_find", array('campaign_id'=>'all', 'customer_id'=>$customerId, 'criteria'=>'all', 'start_date'=>$fromDate, 'end_date'=>$toDate));
//		if(!MM_LimeLightService::isSuccessful($result)) {
//			return MM_LimeLightUtils::getErrorMessage($result);
//		}
		$orderHistory = array();
		
//		$orderIds = explode(",", $result["order_ids"]);
//		foreach($orderIds as $orderId){
//			$order = MM_LimeLightService::getOrder($orderId);
//			if(!($order instanceof MM_Response)){
//				$orderHistory[$orderId] = $order;
//			}
//		}
		return $orderHistory;
	}
	
	public function viewOrder($id){
		return self::getOrder($id);
	}
	
	public static function getOrder($orderId)
	{
		LogMe::write("LLS::getOrder({$orderId}) ");
		$result = MM_LimeLightService::call("order_view", array('order_id'=>$orderId));
		
		LogMe::write("LLS::getOrder({$orderId}) : result : ".json_encode($result));
		if(!MM_LimeLightService::isSuccessful($result)) {
			return MM_LimeLightUtils::getErrorMessage($result);
		}
		
		return $result;
	}
	
	public function updateOrderRecurring($orderId, $status, $userId=0)
	{
		$order = new MM_Order($orderId);
		
		if(!$order->isValid()) {
			return new MM_Response("An error occurred when retrieving order with ID '".$orderId."'", MM_Response::$ERROR);
		}
		
		$params = array();
		$params['order_id'] = $order->getId();
		$params['status'] = $status;
		 
		$result = MM_LimeLightService::call("order_update_recurring", $params);
		
    	return MM_LimeLightUtils::getErrorMessage($result);
	}
	
	public static function updateShippingInfo(MM_User $user){
		$order = new MM_Order($user->getLastOrderId());
		
		if(!$order->isValid()) {
			return new MM_Response("An error occurred when retrieving order with ID '".$user->getLastOrderId()."'", MM_Response::$ERROR);
		}
		
		$params = array();
		
		// TODO ERIC add other fields to update
	 	$params['order_ids'] = $order->getId().",".$order->getId().",".$order->getId().",".$order->getId().",".$order->getId();
		$params["actions"] = "shipping_address1,shipping_city,shipping_state,shipping_zip,shipping_country";
		// TODO ERIC remove commas from user data
		$params["values"] = $user->getShippingAddress().",".$user->getShippingCity().",".$user->getShippingState().",".$user->getShippingZipCode().",".$user->getShippingCountry();
	 	
		$result = MM_LimeLightService::call("order_update", $params);
		
    	return MM_LimeLightUtils::getErrorMessage($result);
	}
	
	public static function updateBillingInfo(MM_User $user, $creditCardNumber="", $creditCardType="", $expirationMonth="", $expirationYear=""){
		$order = new MM_Order($user->getLastOrderId());
		
		if(!$order->isValid()) {
			return new MM_Response("An error occurred when retrieving order with ID '".$user->getLastOrderId()."'", MM_Response::$ERROR);
		}
		
		$params = array();
		
		$additionalOrders = "";
		$additionalActions = "";
		$additionalValues = "";
		if(!empty($creditCardNumber)){
			$additionalOrders.= ",".$order->getId();
			$additionalActions .= ",cc_number";	
			$additionalValues .= ",".$creditCardNumber;
		}
		if(!empty($creditCardType)){
			$additionalOrders.= ",".$order->getId();
			$additionalActions .= ",cc_payment_type";	
			$additionalValues .= ",".$creditCardType;
		}
		if(!empty($expirationMonth) && !empty($expirationYear)){
			$additionalOrders.= ",".$order->getId();
			$additionalActions .= ",cc_expiration_date";	
			$additionalValues .= ",".$expirationMonth.$expirationYear;
		}
		
		// TODO ERIC add other fields to update
	 	$params['order_ids'] = $order->getId().",".$order->getId().",".$order->getId().",".$order->getId().",".$order->getId().$additionalOrders;
		$params["actions"] = "billing_address1,billing_city,billing_state,billing_zip,billing_country".$additionalActions;
		// TODO ERIC remove commas from user data
		$params["values"] = $user->getBillingAddress().",".$user->getBillingCity().",".$user->getBillingState().",".$user->getBillingZipCode().",".$user->getBillingCountry().$additionalValues;
	 	LogMe::write("updateBillingInfo() : ".json_encode($params));
		$result = MM_LimeLightService::call("order_update", $params);
//	
		$codes = explode(",", $result["response_code"]);
		
		$errors = "";
		if(count($codes)>1){
			for($i=0; $i<count($codes); $i++){
				$tmpResponse = array(
					'response_code'=>$codes[$i],
				);
				
    			$ret = MM_LimeLightUtils::getErrorMessage($tmpResponse);
    			
    			if($ret->type == MM_Response::$ERROR){
    				$errors.= $ret->message."<br />";
    			}
			}
			if(!empty($errors)){
				return new MM_Response($errors, MM_Response::$ERROR);	
			}
			return new MM_Response();
		}
		else{
    		return MM_LimeLightUtils::getErrorMessage($result);
		}
	}
	
	public static function updateCustomerInfo(MM_User $user)
	{ 	
		$order = new MM_Order($user->getLastOrderId());
		
		if(!$order->isValid()) {
			return new MM_Response("An error occurred when retrieving order with ID '".$user->getLastOrderId()."'", MM_Response::$ERROR);
		}
		
		$params = array();
		
		// TODO ERIC add other fields to update
	 	$params['order_ids'] = $order->getId().",".$order->getId().",".$order->getId().",".$order->getId();
		$params["actions"] = "first_name,last_name,email,phone";
		// TODO ERIC remove commas from user data
		$params["values"] = $user->getFirstName().",".$user->getLastName().",".$user->getEmail().",".$user->getPhone();
	 	
		$result = MM_LimeLightService::call("order_update", $params);
		
    	return MM_LimeLightUtils::getErrorMessage($result);
	}
	
	public function changeMembership(MM_User $user, MM_MemberType $crntMemberType, MM_MemberType $newMemberType)
	{
		global $mmSite;
		
		if($user->hasCardOnFile()) 
		{
			$crntOrder = new MM_Order($user->getLastOrderId(true));
			
			if(!$crntOrder->isValid()) {
				return new MM_Response("An error occurred when retrieving order with ID '".$user->getLastOrderId(true)."'", MM_Response::$ERROR);
			}
		}
		
		// if current member type is paid, issue appropriate refund and cancel order
		if(!$crntMemberType->isFree()) 
		{	
			$orderRefund = self::calculateOrderRefund($crntOrder);
			
			if($orderRefund instanceof MM_Response) {
				return $orderRefund;
			}
			
			// if refund is greater than $0.00, issue refund, otherwise stop recurring on the current order
			if(floatval($orderRefund) > 0) 
			{ 
				$result = self::issueOrderRefund($crntOrder->getId(), $orderRefund);
				
				if(!MM_LimeLightService::isSuccessful($result)) {
					return MM_LimeLightUtils::getErrorMessage($result);
				}
			}
			else if($crntOrder->isRecurring()) {
				$lls = new MM_LimeLightService();
				$result = $lls->updateOrderRecurring($crntOrder->getId(), self::$REBILL_STATUS_STOP);
				
				if($result->type == MM_Response::$ERROR) {
					return $result;
				}
			}
		}
		
		$updatedUser = new MM_User();
		$updatedUser->setMainOrderId(MM_TransactionEngine::$MM_DFLT_ORDER_ID);
		
		// if new member type is paid, place new order with card on file
		if(!$newMemberType->isFree() && $user->hasCardOnFile())
		{
			$product = new MM_Product($newMemberType->getRegistrationProduct());
			$lls = new MM_LimeLightService();
			$result = $lls->placeOrderCardOnFile($crntOrder->getId(), $product->getCampaignId(), $newMemberType->getRegistrationProduct(), $crntOrder->getShippingMethod(), $user->getId());
			
			if($result instanceof MM_Response) {
				return $result;
			}
			
			$updatedUser = new MM_User();
			$updatedUser->setMainOrderId($result->orderId);
		}
		else if(!$crntMemberType->isFree())
		{
			$updatedUser->setMainOrderId($crntOrder->getId());
		}
		
		return $updatedUser;
	}
	
	public function refundOrder($id, $refundAmount){
		return self::issueOrderRefund($id, $refundAmount,0);
	}
	
	public static function calculateOrderRefund(MM_Order $order)
	{
		if($order->isRecurring()) 
		{
			$result = MM_LimeLightService::call("order_calculate_refund", array('order_id'=>$order->getId()));
			
			if(!MM_LimeLightService::isSuccessful($result)) {
				return MM_LimeLightUtils::getErrorMessage($result);
			}
			
			return floatval($result["amount"]);
		}
		else {
			return $order->getProduct()->getPrice();
		}
	}
	
	private static function issueOrderRefund($orderId, $refundAmount, $keepRecurring=0)
	{
		return MM_LimeLightService::call("order_refund", array('order_id'=>$orderId, 'amount'=>$refundAmount, 'keep_recurring'=>$keepRecurring));
	}
	
	public function fastForwardMembership(MM_Product $product, $price, $days=0){
		global $current_user;
		$user = new MM_User($current_user->ID);
		
		$product->setPrice($price);
		$result = $this->purchaseProduct($user, $product, true);
		if($result instanceof MM_Response){
			return $result;
		}
		
		if($product->isRecurring(true)){
			return $this->updateOrderRecurring($result, MM_PaymentService::$REBILL_STATUS_STOP, $user->getId());
		}
		return new MM_Response();
	}
	
	private static function duplicateProductAtNewPrice(MM_Product $product, $price, $newName)
	{
		$result = MM_LimeLightService::call("product_copy", array('product_id'=>$product->getProductId(), 'new_name'=>$newName));
			
		if(!MM_LimeLightService::isSuccessful($result)) {
			return MM_LimeLightUtils::getErrorMessage($result);
		}
		
		$newProductId = $result["new_product_id"];
		
		$params = array();
		
	 	$params['product_ids'] = $newProductId;
		$params["actions"] = "product_price";
		$params["values"] = $price;
		
		$result = MM_LimeLightService::call("product_update", $params);
			
		if(!MM_LimeLightService::isSuccessful($result)) {
			return MM_LimeLightUtils::getErrorMessage($result);
		}
		
		return $newProductId;
	}
	
	/** HELPER METHODS */
	private static function call($method, $params=false, $requestPage="", $doAuthenticate=true)
	{
		global $mmSite;
		
		if($doAuthenticate) {
			if(!$mmSite->authenticate())
			{
				return false;
			}
		}
		
		if(empty($requestPage)) {
			$requestPage = self::$URL_MEMBERSHIP_API;
		}
		
		$post = "mm_provider=mm&username={$mmSite->getLLUsername()}&";
		$post .= "password={$mmSite->getLLPassword()}&";
		$post .= "method={$method}&";
		
		if(!empty($params) && is_array($params))
		{
	 		foreach($params as $k=>$v)
	 		{
	 			// TODO MATT urlencode?
	 			$post.= $k."=".$v."&";
	 		}
		}
		
		// TEST ONLY
		//echo var_dump($post);
		 
		$result = MM_LimeLightService::sendLLRequest($post, $requestPage);
		
		if(empty($result)) {
			return false;
		}
		LogMe::write("call() : ".json_encode($result)); 	
		$response = array();
		
		if(preg_match("/[\&]+/", $result))
		{
			$item = explode("&",$result);
			
			for($i=0; $i<count($item); $i++)
			{
			 	$params = explode("=", $item[$i]);
			 	
			 	if(isset($params[1])) {
			 		if(preg_match("/[\,]+/", $params[1])){
			 			// has commas, could ruin even pairing if botched.
			 			$response[$params[0]] = $params[1];
			 		}
			 		else{
			 			$response[$params[0]] = urldecode($params[1]);
			 		}
			 	}
			 	else {
			 		$response[$params[0]] = "";
			 	}
			}
		}
		else if(preg_match("/(\=)/", $result))
		{
			$params = explode("=", $result);
	 		if(preg_match("/[\,]+/", $params[1])){
	 			// has commas, could ruin even pairing if botched.
				$response[$params[0]] = $params[1];
	 		}
	 		else{
				$response[$params[0]] = urldecode($params[1]);
	 		}
		}
		else if(preg_match("/[0-9]+/", trim($result)))
		{
			return array("response_code"=>$result);
		} 
		else
		{
			return false;
		}
		 
		return $response;
	}
	
	private static function sendLLRequest($post, $requestPage)
	{
		global $mmSite;
		
		$ssl = false;
		$apiUrl = $mmSite->getLLUrl();
		
		if(empty($requestPage)) {
			$requestPage = self::$URL_MEMBERSHIP_API;
		}
		
		if(preg_match("/(transact\.php)/", $requestPage) || preg_match("/(order_find)/", $post) || (preg_match("/(cc_)/", $post) && preg_match("/(order_update)/", $post)))
		{
			$ssl = true;
			$apiUrl = preg_replace("/(http\:)/", "https:", $apiUrl);
		}
		 
		$apiUrl = stripslashes($apiUrl);
		
		$url = $apiUrl.$requestPage;
		LogMe::write("sendLLRequest() : ".$url." : ".$post);
		$ch = curl_init($url);
		
		curl_setopt($ch, CURLOPT_POST, 1);
		curl_setopt($ch, CURLOPT_POSTFIELDS, $post);
		
		if($ssl) {
			curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
		}
		 	
//		curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
		curl_setopt($ch, CURLOPT_HEADER, 0);  			// DO NOT RETURN HTTP HEADERS
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);  	// RETURN THE CONTENTS OF THE CALL
		
		$content = curl_exec($ch);
		
		curl_close($ch);
//		LogMe::write("sendLLRequest() : ".LogMe::write($content));
		return $content;
	}
	
	private static function isSuccessful($result) 
	{
		if(!$result) {
			return false; 
		}
		
		if(!isset($result["response"]) && !isset($result["responseCode"]) && !isset($result["response_code"])) {
			return false;
		}
		
		if(isset($result["response"]) && strpos($result["response"], "100") === false) {
			return false;
		}
		
		if(isset($result["responseCode"]) && strpos($result["responseCode"], "100") === false) {
			return false;
		}
		
		if(isset($result["response_code"]) && strpos($result["response_code"], "100") === false) {
			return false;
		}
		
		return true;
	}
 }
